/**
 * Created by elvis on 22.06.15.
 */

function getAllSectorVisualInfo(event_id, api_url){
    window.loader.show();
    $.ajax({
        type: "GET",
        url: api_url+"/getMap",
        data: {
            event_id : event_id,
            data : JSON.stringify({
                all : true
            })
        },
        success: getAllSectorVisualInfoResponse,
        dataType: "JSON"
    });
}


// response for getting all sectors
function getAllSectorVisualInfoResponse(result){
    //var result = JSON.parse(result);
    if (result){
        window.editor.editorObj.setVisualBox(result.box);
        if (result.sectors){ // set sectors scheme to visual editor
            for (var i=0;i<result.sectors.length;i++){
                getSectorVisualInfoResponse(result.sectors[i]);
            }
        }else{
            console.log('No info about scheme sectors');
        }
        if(result.imported){
            getImportedVisualInfoResponse(JSON.stringify(result.imported));
        }
        window.editor.editorObj.setTrimmedZoom();
        window.editor.editorObj.changeZoomControlsVisibility();
        window.editor.editorObj.checkDragControlsVisibility();
        schemeLoadingListener();
    }
}


function getSectorVisualInfo(sector_item, id ,params){
    window.loader.show();
    var sector_list = $(sector_item),
        sectId = sector_list.attr('id');
    if (id) sectId = id;
    $.ajax({
        type: "GET",
        url: $("#editor_cont").attr('data-api_url')+"/getMap",//TODO  check if correct url
        data: {
            event_id: $("#editor_cont").attr('data-id'),
            sector_id : sectId,
            status : 1
        },
        success: function(data){
            getSectorVisualInfoResponse(data, params)
        },
        dataType: "JSON"
    });
}

// response for getting sectors
function getSectorVisualInfoResponse(result, params){
    var preventAfterLoadTrim;
    params != undefined ? preventAfterLoadTrim = params.preventAfterLoadTrim : preventAfterLoadTrim = false;
    if (params != undefined && params.callback != undefined && typeof callback == "function") params.callback();
    if (result){
        if ((window.editor.editorObj.scaleControl && window.editor.editorObj.scaleControl.val() != 1) || (window.editor.editorObj.zoom != 1)){
            if (!window.editor.editorObj.isPreviewPage  && !preventAfterLoadTrim) window.editor.editorObj.setDefaultZoom();
        }
        if (window.editor.editorObj.hasMacro && window.editor.editorObj.isPreviewPage){
            if (result.sectorBox != undefined && !preventAfterLoadTrim){
                window.editor.editorObj.setVisualBox(result.sectorBox);
                window.editor.editorObj.changeShemeViewMode();
            }
        }
        if (window.editor.editorObj.isPreviewPage){ // check sector visibility set in visual editor
            var macroControl,
                id = result.fun_zone ? result.sector_id : result.id;
            if (window.editor.editorObj.isProductionPage){
                if (!result.front){
                    macroControl = $('[data-joined-to='+id+']');
                    if (macroControl.length > 0 ) macroControl.remove();
                    if (window.loader && window.loader.is(':visible')) window.loader.hide();
                    return false;
                }
            }else{
                if (!result.back){
                    macroControl = $('[data-joined-to='+id+']');
                    if (macroControl.length > 0 ) macroControl.remove();
                    if (window.loader && window.loader.is(':visible')) window.loader.hide();
                    return false
                }
            }
        }
        if (result.scheme){ // set sectors scheme to visual editor
            if(result.scheme.visualChanges == true){
                window.editor.editorObj.setData(JSON.stringify(result),"visualDump");
            }else{
                window.editor.editorObj.setData(JSON.stringify(result),"netDump");
            }
        }else if(result.fun_zone){
            window.editor.editorObj.setData(JSON.stringify(result),"fun_zone");
        }else{
            console.log('No info about sector elements');
        }
        window.editor.editorObj.createSectorHandler();
        if (window.editor.editorObj.hasMacro && window.editor.editorObj.isPreviewPage && !preventAfterLoadTrim){
            window.editor.editorObj.setTrimmedZoom();
            window.editor.editorObj.changeZoomControlsVisibility();
            window.editor.editorObj.checkDragControlsVisibility();
        }
    }
}

// get info about imported elements for visual elements
function getImportedData(callback){
    $.ajax({
        type: "GET",
        url: $("#editor_cont").attr('data-api_url')+"/getMap", //TODO  check if correct url
        data: {
            event_id : $("#editor_cont").attr('data-id'),
            data : JSON.stringify({
                getImported: true
            })
        },
        success: function(data){
            getImportedVisualInfoResponse(data, callback);
        },
        dataType: "JSON"
    });
}

// handle response with imported svg elements for scheme
function getImportedVisualInfoResponse(result, callback){
    if (result){
        if (window.editor.editorObj.hasMacro && window.editor.editorObj.isPreviewPage){
            window.editor.editorObj.changeShemeViewMode();
            window.editor.editorObj.setVisualBox(result.macroBox);
            window.editor.editorObj.svgParentNode.data('macroBox', result.macroBox);
        }
        var imported;
        if (result.imported) imported = result.imported;
        if (result.import) imported = JSON.parse(result.import);
        var i;
        if (imported && imported.length > 0){
            for (i=0;i<imported.length;i++){
                window.editor.editorObj.setImport(imported[i], false);
            }
        }
        if (result.frontHideId != undefined && result.frontHideId.length > 0 && window.editor.editorObj.isProductionPage){
            for (i = 0; i < result.frontHideId.length;i++){
                var macroFr = $('[data-joined-to='+result.frontHideId[i]+']');
                if (macroFr.length > 0) macroFr.remove();
            }
        }else if (result.backHideId != undefined && result.backHideId.length > 0 && window.editor.editorObj.isPreviewPage && !window.editor.editorObj.isProductionPage){
            for (i = 0; i < result.backHideId.length;i++){
                var macroBack = $('[data-joined-to='+result.backHideId[i]+']');
                if (macroBack.length > 0) macroBack.remove();
            }
        }
        if (window.editor.editorObj.hasMacro && window.editor.editorObj.isPreviewPage){
            window.editor.editorObj.setTrimmedZoom();
            window.editor.editorObj.changeZoomControlsVisibility();
            window.editor.editorObj.checkDragControlsVisibility();
        }
    }
    if (callback) callback();
}

$(document).ready(function(e) {
    var map = $("#editor_cont"),
        hasMacro = $('#editor_cont').data('hasmacro');
    //hasMacro = true;

    if (map.length != 0) {

        window.editor = new Editor({
            container: "#editor_cont",
            controls: false,
            generalMoving: false,
            isPreviewPage: true,
            isProductionPage: true,
            dragMode: true,
            hasMacro: hasMacro,
            keepPreviousSelected: true,
            move: false,
            round: false,
            turning: false,
            margin: false,
            reflection: false,
            tooltip: true,
            selectHandler: selectHandler,
            createElementHandler: createElementHandler,
            createSectorHandler: createSectorHandler,
            microModeLoadedListener: microModeLoadedListener
        });
        if (!hasMacro){
            getAllSectorVisualInfo(map.attr('data-id'), map.attr('data-api_url'));
        }else{
            getImportedData(function(){ // get funzones data just when imported loaded for best trim results
                var funId = $('#editor_cont').data('funzones');
                if (funId && funId instanceof Array && funId.length > 0){
                    for (var i=0;i<funId.length;i++){
                        getSectorVisualInfo(null, funId[i], {preventAfterLoadTrim: true});
                    }
                }
                schemeLoadingListener();
            });
        }

    }
});


var customSelectHendler, customCreateElementHandler, customSchemeLoadingListener, customMicroModeLoadedListener;

function selectHandler(currentElements, custom){
    if (window.price_constructor != null && window.price_constructor != undefined){
        window.price_constructor.checkAmountBlockStatus(currentElements);
        window.price_constructor.countSelectedElements(currentElements);
    }else if (window.quote_constructor != null && window.quote_constructor != undefined){
        window.editor.editorObj.checkAmountBlockStatus(currentElements);
    }else if (window.edit_quote_constructor != null && window.edit_quote_constructor != undefined){
        window.editor.editorObj.checkAmountBlockStatus(currentElements);
    }else{
        if (currentElements == null && $('.sector_item a.act').length > 0){
            $('.sector_item a.act').removeClass('act');
        }
    }
    if (!window.editor.editorObj.isProductionPage && !isMobile()) window.editor.editorObj.changeDeselectBtnVisisbility();
    if (customSelectHendler != undefined && typeof customSelectHendler  === "function") customSelectHendler(currentElements);
}

function createElementHandler(createdElement){
    if (window.price_constructor != null && window.price_constructor != undefined){
        window.price_constructor.defineNotUsedElement(createdElement);
    }
    if (customCreateElementHandler != undefined && typeof customCreateElementHandler  === "function") customCreateElementHandler(createdElement);
}

function createSectorHandler(){}

function openMicroListener(){
    // everything you want when switching to micro mode
    if (isMobile() && isMac()){
        // write ios code for custom actions
    }
}

function isMobile(){
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

function isMac(){
    return navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i)?true:false;
}

function outerHTML(node){
    // if IE, Chrome take the internal method otherwise build one
    return node.outerHTML || (
            function(n){
                var div = document.createElement('div'), h;
                div.appendChild( n.cloneNode(true) );
                h = div.innerHTML;
                div = null;
                return h;
            })(node);
}

function mobileCart(id, type){
    if (id != null){
        addToCart(id, type);
        if (window.editor.editorObj.currentElement != null) window.editor.editorObj.deselectElements();
    }else{
        $('.in_mobile_cart').each(function(){
            this.instance.removeClass('in_mobile_cart');
        });
    }
}

function addToCart(id, type){
    var neededEl = $('#' + id);
    if (neededEl.length > 0){
        neededEl = neededEl[0].instance;
        switch (type){
            case 1:
                neededEl.addClass('in_mobile_cart');
                break;
            case 0:
                neededEl.removeClass('in_mobile_cart');
                break;
        }
    }
}

function schemeLoadingListener(){
    if (isMobile()){
        if (window.JSInterface) window.JSInterface.schemeLoadingListener();
    }
    if (customSchemeLoadingListener != undefined && typeof customSchemeLoadingListener  === "function") customSchemeLoadingListener();
}

function microModeLoadedListener(sectId){
    var checkIfLoaded = setInterval(function(){
        var sectEl = $('[sector_id='+sectId+']');
        if (sectEl.length > 0){
            clearInterval(checkIfLoaded);
            if (customMicroModeLoadedListener != undefined && typeof customMicroModeLoadedListener  === "function") customMicroModeLoadedListener(sectId, sectEl);
        }
    }, 50);
}

function getMobileSystemInfo(){
    var mobileOS,
        mobileOSver,
        ua = navigator.userAgent,
        uaindex;

    // determine OS
    if ( ua.match(/iPad/i) || ua.match(/iPhone/i) )
    {
        mobileOS = 'iOS';
        uaindex  = ua.indexOf( 'OS ' );
    }
    else if ( ua.match(/Android/i) )
    {
        mobileOS = 'Android';
        uaindex  = ua.indexOf( 'Android ' );
    }
    else
    {
        mobileOS = 'unknown';
    }

    // determine version
    if ( mobileOS === 'iOS'  &&  uaindex > -1 )
    {
        mobileOSver = ua.substr( uaindex + 3, 3 ).replace( '_', '.' );
    }
    else if ( mobileOS === 'Android'  &&  uaindex > -1 )
    {
        mobileOSver = ua.substr( uaindex + 8, 3 );
    }
    else
    {
        mobileOSver = 'unknown';
    }
    return {systemName:mobileOS, systemVersion: parseFloat(mobileOSver)};
}

function backToMacro(){
    if (window.editor.editorObj != undefined && typeof window.editor.editorObj.backToMacroAction == 'function'){
        window.editor.editorObj.backToMacroAction();
        return true;
    }else{
        return false;
    }
}

// Initializing Editor object
// Written by Oleg Vykhopen 2014

function Editor(par) {

    var global = {};

    // input settings
    global.container = $(par.container);
    global.controls = par.controls;
    global.generalMoving = par.generalMoving;
    global.seatWidth = par.seatWidth || 25;
    global.seatHeight = par.seatHeight || 25;
    global.seatMarginRight = par.seatMarginRight || 8;
    global.seatMarginBottom = par.seatMarginBottom || 16;
    global.round = par.round;
    global.move = par.move;
    global.isPreviewPage = par.isPreviewPage;
    global.isProductionPage = par.isProductionPage;
    global.turning = par.turning;
    global.margin = par.margin;
    global.keepPreviousSelected = par.keepPreviousSelected;
    global.reflection = par.reflection;
    global.selectHandler = par.selectHandler || function () {};
    global.createElementHandler = par.createElementHandler || function () {};
    global.createSectorHandler = par.createSectorHandler || function () {};
    global.microModeLoadedListener = par.microModeLoadedListener || function () {};
    global.dragMode = par.dragMode;
    global.isMobile = isMobile();
    global.isMac = isMac();
    global.tooltip = par.tooltip;
    // class object and its methods

    global.editorObj = {

        zoom: 1,
        zoomStep: 0.05,
        minZoom: 0.1,
        amountInfoBlock: $('#amount_info_block'),
        svgChildBlock: global.container.children('#svg_overflow'),
        svgParentNode: $('#svg_cont'),
        sectorsList: $('#sectors_list'),
        sectorsListItems: $('#sectors_list').find('.sector_item '),
        IDD_FAN_ZONE: 2,
        allowPanDrag: global.isPreviewPage && global.isProductionPage,
        dragMode: global.dragMode,
        hasMacro: par.hasMacro,
        isMicroView: true,
        isPreviewPage: global.isPreviewPage,
        isProductionPage: global.isProductionPage,
        createSectorHandler: global.createSectorHandler,
        mobileInfo: getMobileSystemInfo(),

        createEditor: function () {

            if (!global.isMobile) {
                this.controlsCont = $('<div id="controls_cont"></div>');
                this.svgChildBlock.prepend(this.controlsCont);

                // create scale controls
                this.scaleOutBtn = $('<div class="scaleOut"></div>');
                this.scaleInBtn = $('<div class="scaleIn"></div>');
                this.controlsCont.append(this.scaleInBtn, this.scaleOutBtn);
                this.scaleOutBtn.on('click', function () {
                    global.editorObj.scaleControl.val(parseFloat(global.editorObj.scaleControl.val()) - global.editorObj.zoomStep).trigger('change');
                });
                this.scaleInBtn.on('click', function () {
                    global.editorObj.scaleControl.val(parseFloat(global.editorObj.scaleControl.val()) + global.editorObj.zoomStep).trigger('change');
                });
                this.scaleControl = $('<input id="scaleControl" type="range" max="1" min="0.1" step="0.05" orient="vertical" value="1" />');
                this.controlsCont.append(this.scaleControl);
                this.scaleControl.change(function () {
                    global.editorObj.zoomElements(parseFloat($(this).val()));
                });
                this.scaleControl.mousewheel(function (event) { // add zoom when use mousewheel on scale control
                    global.editorObj.mouseWheelZoom(event);
                });

                // cerate scheme mode controls
                this.dragControlHand = $('<div class="dragControl hand" type="button"></div>');
                this.dragControlSelect = $('<div class="dragControl select" type="button"></div>');
                if (global.dragMode) {
                    this.dragControlHand.addClass('active');
                } else {
                    this.dragControlSelect.addClass('active');
                }
                this.controlsCont.append(this.dragControlHand, this.dragControlSelect);
                this.dragControlHand.on('click', function () {
                    global.editorObj.changeMode(1);
                });
                this.dragControlSelect.on('click', function () {
                    global.editorObj.changeMode(0);
                });
                if (global.isProductionPage) {
                    this.dragControlHand.hide();
                    this.dragControlSelect.hide();
                }
                // hot key for changing modes
                $(window).keydown(function (e) {
                    var step = 1,
                        allowMove = !global.editorObj.dragMode && global.editorObj.currentElement != null;
                    switch (e.keyCode){
                        case 72:
                            if (!global.editorObj.dragMode && global.editorObj.dragControlSelect.hasClass('active')){
                                global.dragMode = true;
                                global.editorObj.dragMode = true;
                                global.editorObj.svgParentNode.addClass('dragged');
                            }else if(global.editorObj.dragMode && global.editorObj.dragControlHand.hasClass('active') && !global.isProductionPage){
                                global.dragMode = false;
                                global.editorObj.dragMode = false;
                                global.editorObj.svgParentNode.removeClass('dragged');
                            }
                            break;
                        case 37:
                            if (allowMove){
                                e.preventDefault();
                                if (global.editorObj.shiftPressed) step = global.seatWidth + global.seatMarginRight;
                                global.editorObj.moveElement("left", step);
                            }
                            break;
                        case 38:
                            if (allowMove) {
                                e.preventDefault();
                                if (global.editorObj.shiftPressed) step = global.seatHeight + global.seatMarginBottom;
                                global.editorObj.moveElement("top", step);
                            }
                            break;
                        case 39:
                            if (allowMove) {
                                e.preventDefault();
                                if (global.editorObj.shiftPressed) step = global.seatWidth + global.seatMarginRight;
                                global.editorObj.moveElement("right", step);
                            }
                            break;
                        case 40:
                            if (allowMove) {
                                e.preventDefault();
                                if (global.editorObj.shiftPressed) step = global.seatHeight + global.seatMarginBottom;
                                global.editorObj.moveElement("bottom", step);
                            }
                            break;
                        default:
                    }
                });
                $(window).keyup(function (e) {
                    switch (e.keyCode){
                        case 72:
                            if (global.editorObj.dragMode && global.editorObj.dragControlSelect.hasClass('active')){
                                global.dragMode = false;
                                global.editorObj.dragMode = false;
                                global.editorObj.svgParentNode.removeClass('dragged');
                            }else if(!global.editorObj.dragMode && global.editorObj.dragControlHand.hasClass('active') && !global.isProductionPage){
                                global.dragMode = true;
                                global.editorObj.dragMode = true;
                                global.editorObj.svgParentNode.addClass('dragged');
                            }
                            break;
                    }
                });

                if (!global.isProductionPage){
                    this.deselectBtn = $('<div id="deselectBtn"></div>');
                    this.svgChildBlock.prepend(this.deselectBtn);
                    this.deselectBtn.on('click', function(){
                        global.editorObj.deselectElements();
                    })
                    this.changeDeselectBtnVisisbility();
                }


            }

            if (this.hasMacro){
                this.backToMacroBtn = $('<div id="backToMacroBtn"></div>');
                this.svgChildBlock.prepend(this.backToMacroBtn);
                this.backToMacroBtn.on('click', function(){
                    global.editorObj.backToMacroAction();
                })
            }

            if (global.controls) {

                // add tools container and tool's controls
                var toolsCont = $('<div></div>').addClass('toolsCont');
                global.container.prepend(toolsCont);

                if (global.round) {
                    var roundControl = $('<div id="round"><a href="#"  id="round_btn" class="edit_control_btn button btn-default tool">Скруглення</a><input id="round_value" type="text" name="round_value" placeholder="px" value="5" /></div>');
                    toolsCont.append(roundControl);
                    $('#round_btn').click(function () {
                        global.editorObj.addBorderRadius();
                    });
                }

                if (global.move) {
                    var moveControl = $('<div id="move"><span id="move_left"></span><span id="move_top"></span><span id="move_right"></span><span id="move_bottom"></span><input type="text" id="move_value" placeholder="px" value="20"/></div>');
                    toolsCont.append(moveControl);
                    $('#move_left').click(function () {
                        global.editorObj.moveElement('left');
                    });
                    $('#move_top').click(function () {
                        global.editorObj.moveElement('top');
                    });
                    $('#move_bottom').click(function () {
                        global.editorObj.moveElement('bottom');
                    });
                    $('#move_right').click(function () {
                        global.editorObj.moveElement('right');
                    });
                }

                if (global.turning) {
                    var turnParentControl = $('<div id="turn_group"><span id="turn_group_left"></span><input id="turn_group_value" type="text" placeholder="degrees" value="10"/><span id="turn_group_right"></span></div>');
                    toolsCont.append(turnParentControl);
                    $('#turn_group_left').click(function () {
                        global.editorObj.turnElement('left', 'group')
                    });
                    $('#turn_group_right').click(function () {
                        global.editorObj.turnElement('right', 'group')
                    });
                }

                if (global.margin) {
                    var marginControl = $('<div id="margin"><input id="margin_slider" type="range" max="100" min="-100" step="1" value="0" /><select class="form-control" id="margin_type"><option value="0">по осі X</option><option value="1">по осі Y</option><option value="2">по осі X та Y</option></select><input id="margin_value" type="text" value="0" /></div>');
                    toolsCont.append(marginControl);
                    var marginSlider = $('#margin_slider');
                    marginSlider.change(function () {
                        marginValue.val($(this).val());
                        global.editorObj.addMargin(marginValue.val(), marginType.val());
                    });
                    var marginValue = $('#margin_value');
                    marginValue.change(function () {
                        marginSlider.val($(this).val());
                        global.editorObj.addMargin($(this).val(), marginType.val());
                    });
                    var marginType = $('#margin_type');
                    marginType.change(function () {
                        global.editorObj.addMargin(marginValue.val(), $(this).val());
                    });
                }

                if (global.reflection) {
                    var mirrowControl = $('<div id="mirrow_cont"><div id="reflect_x"></div><div id="reflect_y"></div></div>');
                    toolsCont.append(mirrowControl);
                    $('#reflect_x').click(function () {
                        global.editorObj.addReflection('x');
                    });
                    $('#reflect_y').click(function () {
                        global.editorObj.addReflection('y');
                    });
                }

                this.importControl = $('<button id="import" class="edit_control_btn tool btn btn-primary btn-xs m-r-sm">Import SVG</button>');
                toolsCont.append(this.importControl);
                this.importControl.click(function () {
                    global.editorObj.importSVG();
                });

                this.exportControl = $('<button id="export" class="edit_control_btn tool btn btn-primary btn-xs m-r-sm">Export SVG</button>');
                toolsCont.append(this.exportControl);
                this.exportControl.click(function () {
                    global.editorObj.exportSVG();
                });

                /*this.addSceneBtn = $('<button id="add_scene" class="edit_control_btn tool btn btn-primary btn-xs m-r-sm">Add scene</button>');
                 toolsCont.append(this.addSceneBtn);
                 this.addSceneBtn.click(function () {
                 global.editorObj.addScene();
                 });

                 this.removeScene = $('<button id="remove_scene" class="edit_control_btn tool btn btn-primary btn-xs m-r-sm">Remove scene</button>');
                 toolsCont.append(this.removeScene);
                 this.removeScene.click(function () {
                 global.editorObj.removeScene();
                 });*/

                this.viewModeControl = $('<select id="view_mode" name="view_mode" class="form-control input-sm">' +
                    '<option value="0">Мікросхема</option>' +
                    '<option value="1">Макросхема</option>' +
                    '</select>');
                toolsCont.append(this.viewModeControl);
                this.viewModeControl.on('change', function(){
                    global.editorObj.changeShemeViewMode();
                });

                // special cont for using in macro mode
                this.makroToolsCont = $('<span id="makroToolsCont"></span>');
                toolsCont.append(this.makroToolsCont.hide());

                this.addMacroElementBtn = $('<button id="add_makro_element" class="edit_control_btn tool btn btn-primary btn-xs m-r-sm">Добавити елемнт</button>');
                this.addMacroElementBtn.on('click', function(){
                    global.editorObj.addMakroElement();
                });

                this.removeMacroElementBtn = $('<button id="remove_makro_element" class="edit_control_btn tool btn btn-primary btn-xs m-r-sm">Видалити елемнт</button>');
                this.removeMacroElementBtn.on('click', function(){
                    global.editorObj.removeMakroElement();
                });

                this.joinToSectorDropdown = $('<select id="join_to_sector_dropdown" name="join_to_sector" class="form-control input-sm"></select>');
                this.sectorsListItems.each(function(){
                    global.editorObj.joinToSectorDropdown.append('<option value="'+$(this).attr('id')+'">'+$(this).find('a').text()+'</option>');
                });

                this.joinToSectorBtn = $('<button id="join_to_sector_btn" class="edit_control_btn tool btn btn-primary btn-xs m-r-sm">Прив\'язати</button>');
                this.joinToSectorBtn.on('click', function(){
                    global.editorObj.joinToSector();
                });

                this.viewSectorsDropdown = $('<select id="view_sector_dropdown" name="view_sector_dropdown" class="form-control input-sm"><option value="-1">Перегляд всіх у макро</option></select>');
                this.sectorsListItems.each(function(){
                    global.editorObj.viewSectorsDropdown.append('<option value="'+$(this).attr('id')+'">'+$(this).find('a').text()+'</option>');
                });
                this.viewSectorsDropdown.on('change', function(){
                    global.editorObj.showSingleSector($(this).val(), false);
                });

                this.makroToolsCont.append(this.addMacroElementBtn, this.removeMacroElementBtn, this.joinToSectorDropdown, this.joinToSectorBtn, this.viewSectorsDropdown);

            }

            global.editorObj.isCrlPressed();
            global.editorObj.isShiftPressed();

            // add general svg object
            if (SVG.supported) {
                this.mainSVG = SVG('svg_cont');
                var draw = this.mainSVG;
                this.nodes = draw.group();
                if (global.isMobile) {
                    SVG.off(window, 'touchstart');
                    SVG.off(window, 'touchend');
                    SVG.on(window, 'touchstart', this.startSelectingMObile);
                    SVG.on(window, 'touchend', this.endSelectingMobile);
                } else {
                    SVG.off(window, 'mousedown');
                    SVG.off(window, 'mouseup');
                    SVG.on(window, 'mousedown', this.startSelecting);
                    SVG.on(window, 'mouseup', this.endSelecting);
                }

                if (!global.isMobile) {
                    this.panZoom = this.nodes.panZoom();
                    SVG.off(window, 'mousemove');
                    SVG.on(window, 'mousemove', this.isSelecting);
                    this.svgChildBlock.mousewheel(function (event) { // add zoom when use mousewheel on svg
                        event.preventDefault();
                    });
                    var scrollTop = 0,
                        scrollLeft = 0;
                    this.svgChildBlock.on('scroll', function(e){
                        var newScrollTop = $(this).scrollTop(),
                            newScrollLeft = $(this).scrollLeft(),
                            topDiff = newScrollTop - scrollTop,
                            leftDiff = newScrollLeft - scrollLeft;
                        global.editorObj.changePositionWhenScroll([
                            global.editorObj.controlsCont,
                            global.editorObj.backToMacroBtn,
                            global.editorObj.deselectBtn], topDiff, leftDiff);
                        scrollTop = newScrollTop;
                        scrollLeft = newScrollLeft;
                    });
                }
                if (global.tooltip) this.createTooltip();
            } else {
                console.log('SVG not supported');
            }

            // additional global features and events
            if (global.generalMoving) {
                if (global.editorObj.svgChildBlock.length > 0) {
                    global.editorObj.svgChildBlock.scroll(function () {
                        global.editorObj.isScrolling = true;
                    });
                } else {
                    console.log('Overflow container missed');
                }
            }

        },

        changeDeselectBtnVisisbility: function(){
            if (this.deselectBtn && this.deselectBtn.length > 0){
                if (this.currentElement != undefined && (this.currentElement.length > 0 || (this.currentElement.node != null && this.currentElement.node != undefined))){
                    this.deselectBtn.show();
                }else{
                    this.deselectBtn.hide();
                }
            }
        },

        changeShemeViewMode: function(){
            this.isMicroView = !this.isMicroView;
            if (this.makroToolsCont) this.makroToolsCont.toggle();
            $('.makroControl').toggle();
            this.svgParentNode.toggleClass('makroView');
            this.sectorsList.toggle();
            if (this.backToMacroBtn && global.isPreviewPage) this.isMicroView == true ? this.backToMacroBtn.show() : this.backToMacroBtn.hide();
            global.editorObj.deselectElements();
            this.setDefaultZoom();this.nodes.move(0, 0); // set to default position for better trimming
            if (this.isMicroView) this.showSingleSector(-1, false);
        },

        addMakroElement: function(){
            var macroControl = $("<rect class='imported makroControl' data-selectable='true' fill='#dddddd' width='450px' height='150px' onclick='window.editor.editorObj.showSingleSector($(this).attr(\"data-joined-to\"), true)'></rect>");
            this.setImport(outerHTML(macroControl.get(0)), false);
        },

        removeMakroElement: function(){
            var curEl = $('.current');
            if (curEl. length > 0){
                curEl.each(function(){
                    if (this.instance.hasClass('makroControl')){
                        this.instance.remove();
                        $(this).remove();

                    }
                });
            }
        },

        backToMacroAction: function(){
            this.changeShemeViewMode();
            if (this.svgParentNode.data('macroBox')){ // set macrobox when switch to makro mode
                this.setVisualBox(global.editorObj.svgParentNode.data('macroBox'));
                this.setTrimmedZoom();
            }else{console.log('Macrobox not found')}
            var singleSectEl = this.svgParentNode.find('.native[data-type=1]'); // clear previously loaded old data
            if (singleSectEl.length > 0){
                singleSectEl.each(function(){
                    this.instance.remove();
                    $(this).remove();
                });
            }
        },

        joinToSector: function(){
            var sectorToJoin = this.joinToSectorDropdown.val(),
                sectorToJoinName = global.editorObj.joinToSectorDropdown.find(':selected').text();
            if (sectorToJoin == ""){
                this.joinToSectorDropdown.trigger('focus');
            }else{
                var curEl = $('.current');
                if (curEl. length > 0){
                    curEl.each(function(){
                        this.instance.data({'joined-to': sectorToJoin, 'label': sectorToJoinName});
                        global.editorObj.setHoverHandlers(this.instance);
                        showAlert('success', "Елемент успішно прив'язано до "+sectorToJoinName+"!");
                    });
                }
            }
        },

        showSingleSector: function(sectId, isUsedFromControl){
            if (isUsedFromControl && !global.editorObj.isPreviewPage) return;
            if (isUsedFromControl && global.editorObj.isProductionPage) return;
            if (sectId == -1){
                $('.makroControl').css('cssText','');
                if (this.makroStyleEl) this.makroStyleEl.remove();
                return;
            }
            $('.makroControl').css('cssText','display: none !important');
            if (this.makroStyleEl) this.makroStyleEl.remove();
            this.makroStyleEl = $('<style type="text/css">.makroView .native[sector_id="'+sectId+'"], .makroView .rect[sector_id="'+sectId+'"]{display: block !important;}#svg_cont.makroView .imported:not([sector_id="'+sectId+'"]), .makroView .rect[data-type="2"]:not([sector_id="'+sectId+'"]), .makroView .native[data-type="2"]:not([sector_id="'+sectId+'"]){display: none !important}</style>')
            this.svgParentNode.prepend(this.makroStyleEl);
            //if (global.isMobile && window.JSInterface && isUsedFromControl) window.JSInterface.showMacroBackButton(true);
            if (openMicroListener != undefined && typeof openMicroListener == "function") openMicroListener();
            var itemInList = this.sectorsList.find('#'+sectId),
                itemPar = itemInList.parent();
            if (itemInList.length > 0){
                if (itemInList.length > 0 && itemPar.hasClass('inactive')) {
                    itemInList.find('.active_control').trigger('click');
                }
            }else{
                var hF = $('<style>.editor_cont[data-hasmacro=true].preview .makroView [data-type="2"] {display: none !important;}</style>');
                this.svgParentNode.prepend(hF);
                getSectorVisualInfo(null, sectId , {callback: function(){
                    hF.remove();
                    global.microModeLoadedListener(sectId);
                }
                });
            }

        },

        hasSectorMacro: function(sectorId){
            return $('.makroControl[data-joined-to='+sectorId+']').length > 0;
        },

        changeMode: function(type){
            switch(type){
                case 1:
                    global.dragMode = true;
                    global.editorObj.dragMode = true;
                    global.editorObj.svgParentNode.addClass('dragged');
                    global.editorObj.dragControlHand.addClass('active');
                    global.editorObj.dragControlSelect.removeClass('active');
                    break;
                case 0:
                    global.dragMode = false;
                    global.editorObj.dragMode = false;
                    global.editorObj.svgParentNode.removeClass('dragged');
                    global.editorObj.dragControlHand.removeClass('active');
                    global.editorObj.dragControlSelect.addClass('active');
                    break;
            }

        },

        changePositionWhenScroll: function(elementsArr, topDiff, leftDiff){
            for (var i=0; i < elementsArr.length; i++){
                if (elementsArr[i] != undefined && elementsArr[i].length > 0){
                    elementsArr[i].css({
                        top: parseFloat(elementsArr[i].css('top')) + topDiff,
                        left: parseFloat(elementsArr[i].css('left')) + leftDiff
                    });
                }
            }

        },

        // general zoom on mousewheel for svg elements
        mouseWheelZoom: function (event) {
            event.preventDefault();
            var scaleVal, scaleStep,
                isZoomNeeded = (this.zoom >= this.minZoom && this.zoom < 1) || (this.zoom == 1 && event.deltaY == -1);
            // scale elements (change controls if needed)
            if (global.editorObj.scaleControl) {
                scaleStep = parseFloat(global.editorObj.scaleControl.attr('step'));
                scaleVal = parseFloat(global.editorObj.scaleControl.val());
                if (event.deltaY == 1) {
                    global.editorObj.scaleControl.val(scaleVal + scaleStep);
                    global.editorObj.scaleControl.trigger('change');
                } else if (event.deltaY == -1) {
                    global.editorObj.scaleControl.val(scaleVal - scaleStep);
                    global.editorObj.scaleControl.trigger('change');
                }
            } else {
                scaleVal = this.zoom;
                scaleStep = this.zoomStep;
                var newZoom;
                if (event.deltaY == 1) {
                    newZoom = scaleVal + scaleStep;
                } else if (event.deltaY == -1) {
                    newZoom = scaleVal - scaleStep;
                }
                if (newZoom > 0 && newZoom <= 1) {
                    this.zoom = newZoom;
                    this.zoomElements(this.zoom);
                }
            }

        },

        getTransformParams: function (obj) {
            if (obj.css('transform') != undefined){
                var matrix = obj.css('transform').replace(/[^0-9\-.,]/g, '').split(',');
                if (matrix.length > 1) {
                    return {
                        x: parseFloat(matrix[12]) || parseFloat(matrix[4]),
                        y: parseFloat(matrix[13]) || parseFloat(matrix[5])
                    };
                } else {
                    return {x: 0, y: 0};
                }
            }else {
                return {x: 0, y: 0};
            }
        },

        getScrollbarWidth: function () {
            var outer = document.createElement("div");
            outer.style.visibility = "hidden";
            outer.style.width = "100px";
            outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
            document.body.appendChild(outer);
            var widthNoScroll = outer.offsetWidth;
            // force scrollbars
            outer.style.overflow = "scroll";
            // add innerdiv
            var inner = document.createElement("div");
            inner.style.width = "100%";
            outer.appendChild(inner);
            var widthWithScroll = inner.offsetWidth;
            // remove divs
            outer.parentNode.removeChild(outer);
            return widthNoScroll - widthWithScroll;
        },

        zoomElements: function (scaleVal) {
            if (global.isMobile){
                $('.rect, .native, .imported').each(function(){
                    this.instance.scale(scaleVal);
                });
                this.svgParentNode.css({width: this.svgParentNode.attr('data-width')*scaleVal, height: this.svgParentNode.attr('data-height')*scaleVal});
                this.zoom = scaleVal;
            }else{
                this.panZoom.zoom(scaleVal);
            }
        },

        setDefaultZoom: function () {
            if (this.scaleControl) {
                this.scaleControl.val(1).trigger('change');
            } else {
                if (this.zoom != 1) {
                    this.zoom = 1;
                    this.zoomElements(1);
                }
            }
        },

        //initializing selecting tool
        startSelecting: function (event) {
            if (global.isProductionPage) return true;
            if (event == undefined) return true;
            //if (global.editorObj.dragSarted) return true; // if element starts dragg don't select new
            if (global.dragMode && !global.isProductionPage) return true; // if element starts dragg don't select new
            global.editorObj.isScrolling = false;
            var clickEl = event.target;
            if ((clickEl.tagName == "svg" || $(clickEl).parents('svg').length > 0) && !global.dragMode && !global.editorObj.dragSarted) {
                // form select area if using multiple select x: event.pageX - global.editorObj.mainSVG.leftOffset
                global.editorObj.selectEnable = true;
                global.editorObj.disableHtmlSelect(true);
                global.editorObj.startPosition = {};
                global.editorObj.mainSVG.topOffset = $(global.editorObj.mainSVG.node).offset().top;
                global.editorObj.mainSVG.leftOffset = $(global.editorObj.mainSVG.node).offset().left;
                global.editorObj.startPosition.y = event.pageY - global.editorObj.mainSVG.topOffset;
                global.editorObj.startPosition.x = event.pageX - global.editorObj.mainSVG.leftOffset;
                if (global.editorObj.selectArea) {
                    global.editorObj.selectArea.remove();
                    delete global.editorObj.selectArea;
                }
                global.editorObj.selectArea = global.editorObj.mainSVG.rect({
                    width: 0,
                    height: 0
                }).fill('#0081FF').x(global.editorObj.startPosition.x).y(global.editorObj.startPosition.y).opacity(0.2);
                // clear previous selected group if not multiple select
                if (global.editorObj.selectedGroup && !global.editorObj.ctrlPressed) global.editorObj.removeGroup(global.editorObj.selectedGroup);
                global.editorObj.getElements();
            }
            if (clickEl.instance != null) {
                // single select
                if (!clickEl.instance.data('selectable')) return true;
                if (global.isPreviewPage && clickEl.instance.hasClass('imported')) return true; // don't allow select decorative in preview pages
                global.editorObj.singleClickElement = clickEl.instance;
                if (!global.editorObj.isGroupSelected && (!global.editorObj.ctrlPressed || global.keepPreviousSelected )) {
                    // use single select if multiple select wasn't fired
                    if (!global.editorObj.singleClickElement.hasClass('clicked')) {
                        if ($('.clicked').length > 0) $('.clicked')[0].instance.removeClass('clicked'); // clear previous single selected element
                        global.editorObj.removeGroup(global.editorObj.selectedGroup);
                        global.editorObj.selectedGroup = global.editorObj.createGroup();
                        global.editorObj.selectedGroup.add(global.editorObj.singleClickElement);
                        global.editorObj.addDraggableAction(global.editorObj.selectedGroup);
                        global.editorObj.singleClickElement.addClass('clicked');
                    }
                    if (!global.editorObj.singleClickElement.hasClass('current')) {
                        global.editorObj.changeCurrentElement(global.editorObj.singleClickElement);
                    } else {
                        global.editorObj.changeCurrentElement(null);
                    }
                }
                else if (global.editorObj.isGroupSelected && !global.editorObj.singleClickElement.hasClass('current') && !global.editorObj.ctrlPressed) {
                    // clear multiple select if single select is fired
                    global.editorObj.removeGroup(global.editorObj.selectedGroup);
                    global.editorObj.changeCurrentElement(global.editorObj.singleClickElement);
                    global.editorObj.isGroupSelected = false;
                    global.editorObj.selectedGroup = global.editorObj.createGroup();
                    global.editorObj.selectedGroup.add(global.editorObj.singleClickElement);
                    global.editorObj.addDraggableAction(global.editorObj.selectedGroup);
                    global.editorObj.singleClickElement.addClass('clicked');
                }
                else if (global.editorObj.isGroupSelected && global.editorObj.singleClickElement.hasClass('current')) {
                    setTimeout(function(){
                        if (!global.editorObj.isDraging){
                            if (global.editorObj.currentElement && global.editorObj.currentElement.length > 0) {
                                for (var i = 0; i < global.editorObj.currentElement.length; i++) {
                                    if ($(global.editorObj.singleClickElement.node).is($(global.editorObj.currentElement[i]))) {
                                        global.editorObj.currentElement.splice(i, 1);
                                        break;
                                    }
                                }
                            }
                            global.editorObj.singleClickElement.removeClass('current');
                            global.editorObj.singleClickElement.removeClass('clicked');
                            global.editorObj.singleClickElement.removeClass('tmp');
                            global.editorObj.copyElement(global.editorObj.singleClickElement, global.editorObj.selectedGroup);
                            global.editorObj.singleClickElement.remove();
                            delete global.editorObj.singleClickElement;
                            if (global.editorObj.currentElement.length == 0){
                                global.editorObj.changeCurrentElement(null);
                            }
                            global.selectHandler(global.editorObj.currentElement);
                        }
                    }, 200);
                }
                if (global.editorObj.ctrlPressed) {
                    clickEl.instance.addClass('tmp');
                    if (global.keepPreviousSelected) {
                        var selectedElements;
                        if (!global.editorObj.ctrlPressed) {
                            selectedElements = $('.tmp');
                        } else {
                            selectedElements = $('.current,.tmp');
                        }
                        if (selectedElements.length > 0) {
                            // multiple array was selected
                            global.editorObj.changeCurrentElement(selectedElements);
                            global.editorObj.selectedGroup = global.editorObj.createGroup();
                            selectedElements.each(function () {
                                this.instance.removeClass('tmp');
                                global.editorObj.selectedGroup.add(this.instance);
                            });
                            global.editorObj.addDraggableAction(global.editorObj.selectedGroup);
                            global.editorObj.isGroupSelected = true;
                        } else if ($('.clicked').length == 0) {
                            // clear everything if nothing was selected
                            global.editorObj.isGroupSelected = false;
                            global.editorObj.changeCurrentElement(null);
                            if ($('.clicked').length > 0) $('.clicked')[0].instance.removeClass('clicked');
                        }
                        global.selectHandler(global.editorObj.currentElement);
                    }
                }
            }
        },

        // selecting elements on editor
        isSelecting: function (event) {
            if (window.editor.editorObj.dragMode && global.editorObj.panZoom.pan.mousedown) window.EventListeners.mouse_move(event);
            if (global.editorObj.selectEnable && global.editorObj.selectArea) {
                var scrolledTop = global.editorObj.svgChildBlock.scrollTop(),
                    scrolledLeft = global.editorObj.svgChildBlock.scrollLeft(),
                    currentY = event.pageY - global.editorObj.mainSVG.topOffset,
                    currentX = event.pageX - global.editorObj.mainSVG.leftOffset;
                // form select area rectangle
                global.editorObj.selectArea.height(Math.abs(currentY - global.editorObj.startPosition.y));
                global.editorObj.selectArea.width(Math.abs(currentX - global.editorObj.startPosition.x));
                if (scrolledTop <= 0) {
                    if (currentY < global.editorObj.startPosition.y) global.editorObj.selectArea.y(currentY);
                } else {
                    global.editorObj.startPosition.y >= currentY ? global.editorObj.selectArea.y(currentY) : global.editorObj.selectArea.y(global.editorObj.startPosition.y);
                    if (global.editorObj.isScrolling) {
                        if (global.editorObj.startPosition.y < global.editorObj.svgChildBlock.height()) {
                            global.editorObj.selectArea.height(global.editorObj.selectArea.height() + scrolledTop);
                        } else {
                            global.editorObj.selectArea.height(global.editorObj.selectArea.height());
                        }
                    }
                }
                if (scrolledLeft <= 0) {
                    if (currentX < global.editorObj.startPosition.x) global.editorObj.selectArea.x(currentX);
                } else {
                    global.editorObj.startPosition.x >= currentX ? global.editorObj.selectArea.x(currentX) : global.editorObj.selectArea.x(global.editorObj.startPosition.x);
                    if (global.editorObj.isScrolling) {
                        global.editorObj.selectArea.width(global.editorObj.selectArea.width() + scrolledLeft);
                    }
                }
            }
        },

        // deleting selecting tool
        endSelecting: function (event) {
            if (!$(event.target).hasClass('editor_cont') && $(event.target).parents('editor_cont').length == 0){
                global.editorObj.panZoom.pan.mousedown = false;
                window.editor.editorObj.disableHtmlSelect(false);
            }
            if (global.isProductionPage) return true;
            if (event == undefined) return true;
            var clickEl = event.target;
            if (global.editorObj.dragSarted) return true;
            if (global.editorObj.selectArea && global.editorObj.selectArea.height() == 0 && $(clickEl).is($(global.editorObj.selectArea.node))) {
                //global.editorObj.deselectElements();
            }
            if (global.editorObj.selectEnable) {
                global.editorObj.selectEnable = false;
                if (global.editorObj.selectArea && global.editorObj.selectArea.width() != 0) {
                    // check if elements are in select area
                    if (global.editorObj.allSingleElements && global.editorObj.allSingleElements.length > 0 && global.editorObj.selectArea.width() != 0) {
                        global.editorObj.allSingleElements.each(function () {
                            if (this.instance.visible() && !global.editorObj.isEmptyBbox(this.instance.bbox())){
                                if (global.editorObj.isInside(global.editorObj.selectArea, this.instance)) {
                                    this.instance.addClass('tmp');
                                } else {
                                    this.instance.removeClass('tmp');
                                }
                            }
                        });
                    }
                    if (global.editorObj.selectArea) {
                        global.editorObj.selectArea.remove();
                        delete global.editorObj.selectArea;
                    }
                }
                global.editorObj.disableHtmlSelect(false);
                if (global.editorObj.ctrlPressed) global.editorObj.removeGroup(global.editorObj.selectedGroup);
                var selectedElements;
                if (!global.editorObj.ctrlPressed) {
                    selectedElements = $('.tmp');
                } else {
                    selectedElements = $('.current,.tmp');
                }
                if (selectedElements.length > 0) {
                    // multiple array was selected
                    global.editorObj.changeCurrentElement(selectedElements);
                    global.editorObj.selectedGroup = global.editorObj.createGroup();
                    selectedElements.each(function () {
                        this.instance.removeClass('tmp');
                        global.editorObj.selectedGroup.add(this.instance);
                    });
                    global.editorObj.addDraggableAction(global.editorObj.selectedGroup);
                    global.editorObj.isGroupSelected = true;
                } else if ($('.clicked').length == 0) {
                    // clear everything if nothing was selected
                    /*global.editorObj.isGroupSelected = false;
                     global.editorObj.changeCurrentElement(null);
                     if ($('.clicked').length > 0) $('.clicked')[0].instance.removeClass('clicked');*/
                }
            }
            if (!global.isProductionPage) global.selectHandler(global.editorObj.currentElement);
        },

        // add draggable action for each element
        addDraggableAction: function (element, params) {
            if (global.generalMoving) {
                var dragEl,
                    translate = {
                        x: element.transform().x,
                        y: element.transform().y
                    };
                element.beforestart = function (event) {

                }
                element.dragstart = function (event) {
                    if (global.isPreviewPage){
                        element.translate(translate.x, translate.y);
                    }else{
                        global.editorObj.disableHtmlSelect(true);
                    }
                    global.editorObj.dragSarted = true;
                    if (global.editorObj.tooltipCont.is(':visible')) global.editorObj.tooltipCont.hide().text("");
                }
                element.dragend = function (event) {
                    if (global.isPreviewPage){
                        element.translate(translate.x, translate.y);
                    }else{
                        global.editorObj.disableHtmlSelect(false);
                    }
                    global.editorObj.dragSarted = false;
                    global.editorObj.isDraging = false;
                }
                element.dragmove = function (event) {
                    if (global.isPreviewPage) element.translate(translate.x, translate.y);
                    global.editorObj.isDraging = true;
                }
                if (element.hasClass('transformed')) {
                    var dragGroup = element.parent.group();
                    dragGroup.add(element);
                    dragEl = dragGroup;
                } else {
                    dragEl = element;
                }
                if (params) {
                    dragEl.draggable(function (x, y) {
                        return {
                            x: x < params.maxX || (global.container.width()) && x > (params.minX || 0),
                            y: y < (params.maxY || global.container.height()) && y > (params.minY || 0)
                        }
                    });
                } else {
                    dragEl.draggable();
                }
            }
            return element;
        },

        // remove draggable action
        removeDraggableAction: function (element) {
            element.fixed();
        },

        startSelectingMObile: function (event) {
            var clickEl = event.target;
            if (clickEl.tagName != "svg" && clickEl.instance != null) {
                if (!clickEl.instance.data('selectable')) return;
                if (global.isPreviewPage && clickEl.instance.hasClass('imported')) return; // don't allow select decorative in preview pages
                global.editorObj.singleClickElement = clickEl.instance;
                /*if (!global.editorObj.singleClickElement.hasClass('clicked')) {
                 if ($('.clicked').length > 0) $('.clicked')[0].instance.removeClass('clicked');
                 global.editorObj.removeGroup(global.editorObj.selectedGroup);
                 global.editorObj.selectedGroup = global.editorObj.createGroup();
                 global.editorObj.selectedGroup.add(global.editorObj.singleClickElement);
                 global.editorObj.addDraggableAction(global.editorObj.selectedGroup);
                 global.editorObj.singleClickElement.addClass('clicked');
                 }*/
                if (!global.editorObj.singleClickElement.hasClass('current')) {
                    global.editorObj.changeCurrentElement(global.editorObj.singleClickElement);
                    if (window.JSInterface) window.JSInterface.clickHandler(global.editorObj.singleClickElement.attr('id'), global.editorObj.singleClickElement.attr('data-server_id'), global.editorObj.singleClickElement.attr('data-type'));
                } else {
                    global.editorObj.changeCurrentElement(null);
                    if (window.JSInterface) window.JSInterface.clickHandler("null", "null", "null");
                }
            } else if (clickEl.tagName == "svg") {
                if (global.editorObj.selectedGroup) global.editorObj.removeGroup(global.editorObj.selectedGroup);
                global.editorObj.changeCurrentElement(null);
                if (window.JSInterface) window.JSInterface.clickHandler("null", "null", "null");
                if ($('.clicked').length > 0) $('.clicked')[0].instance.removeClass('clicked');
            }
        },

        endSelectingMobile: function (event) {
            global.selectHandler(global.editorObj.currentElement);
        },

        // get all single elements in svg
        getElements: function () {
            // don't allow select decorative in preview pages
            if (!global.isPreviewPage) {
                this.allSingleElements = $('.rect, .native, .imported').not(global.editorObj.selectArea).not('[data-selectable="false"]');
            } else {
                this.allSingleElements = $('.rect, .native').not(global.editorObj.selectArea).not('.imported').not('[data-selectable="false"]');
            }
            return this.allSingleElements;
        },

        //check if element is in some box
        isInside: function (box, element) {
            var elementBbox = element.bbox(),
                elCoords = {
                    x1: elementBbox.x,
                    x2: elementBbox.x2,
                    y1: elementBbox.y,
                    y2: elementBbox.y2,
                    cx: elementBbox.cx,
                    cy: elementBbox.cy
                };
            var parTrans = {
                x: this.nodes.transform().x,
                y: this.nodes.transform().y,
                scale: this.nodes.transform().scaleX
            };
            if (parTrans){
                elCoords = {
                    x1: elementBbox.x*parTrans.scale + parTrans.x,
                    x2: elementBbox.x2*parTrans.scale + parTrans.x,
                    y1: elementBbox.y*parTrans.scale + parTrans.y,
                    y2: elementBbox.y2*parTrans.scale + parTrans.y,
                    cx: elementBbox.cx*parTrans.scale + parTrans.x,
                    cy: elementBbox.cy*parTrans.scale + parTrans.y
                };
            }
            return (box.inside(elCoords.cx, elCoords.cy) || box.inside(elCoords.x1, elCoords.y1) || box.inside(elCoords.x2, elCoords.y1) || box.inside(elCoords.x1, elCoords.y2) || box.inside(elCoords.x2, elCoords.y2));
        },

        // refactor coordinates when transform is used
        transformCoords: function (x, y, rotation, zoom) {
            var transformedCoords = {};
            transformedCoords.x = (x * Math.cos(rotation) + y * Math.sin(rotation));
            transformedCoords.y = Math.abs(y * Math.cos(rotation) + x * Math.sin(-rotation));
            return transformedCoords;
        },


        //create group of elements
        createGroup: function (container) {
            var group = this.nodes.group();
            return group;
        },

        //add element to group
        addToGroup: function (group, element) {
            group.add(element);
            return group;
        },

        //remove element from group
        removeFromGroup: function (group, element) {
            group.remove(element);
            if (group.children().length == 0) {
                group.remove();
                return false;
            }
            return group;
        },

        //remove group without removing elements
        removeGroup: function (group) {
            if (group) {
                var groupEl = group.node.childNodes;
                if (groupEl && groupEl.length > 0) {
                    // move elemts from group to parent (duplicates)
                    var new_elements = [];
                    $(groupEl).each(function (i, children) {
                        var oldEl = children.instance;
                        new_elements.push(global.editorObj.copyElement(oldEl, group));
                        oldEl.remove();
                    });
                    this.currentElement = $('.current'); // TODO ise new_elements
                }
                global.editorObj.selectedGroup.remove();
            }
        },

        // dublicate element before deleting
        copyElement: function (oldEl, group, group_params) {
            var new_element;
            new_element = outerHTML(oldEl.node);
            this.setImport(new_element, false);
            var elScale = this.just_created.transform().scaleX;
            var parX = group.x();
            var parY = group.y();
            if (elScale != 1) {
                parX /= elScale;
                parY /= elScale;
                this.just_created.scale(1);
            }
            this.just_created.x(oldEl.x() + parX).y(oldEl.y() + parY);
            this.just_created.scale(elScale);
            if (!oldEl.visible()) {
                this.just_created.hide();
            }
            return this.just_created;
        },

        //change previous current active element
        changeCurrentElement: function (new_element) {
            if (global.editorObj.currentElement) {
                if (global.editorObj.currentElement.length == null || isNaN(global.editorObj.currentElement.length) || typeof global.editorObj.currentElement.length == "function") {
                    global.editorObj.currentElement.removeClass('current');
                } else {
                    global.editorObj.currentElement.each(function () {
                        this.instance.removeClass('current');
                    });
                }
            }
            if (new_element != null) {
                if (new_element.length == null || isNaN(new_element.length) || typeof new_element.length == "function") {
                    new_element.addClass("current");
                } else {
                    new_element.each(function () {
                        this.instance.addClass("current");
                    });
                }
            }
            global.editorObj.currentElement = new_element;

            var userAgent = window.navigator.userAgent;
            if (userAgent.match(/iPad/i) || userAgent.match(/iPhone/i)) {
                window.location.href = "callback://placeSelectionChanged";
            }
        },

        // set custom active elements
        setCustomSelectedElements: function (selectedElements) {
            selectedElements = selectedElements.not('[data-selectable="false"]');
            this.changeCurrentElement(selectedElements);
            this.selectedGroup = this.createGroup();
            selectedElements.each(function () {
                this.instance.removeClass('tmp');
                window.editor.editorObj.selectedGroup.add(this.instance);
            });
            this.addDraggableAction(this.selectedGroup);
            this.isGroupSelected = true;
        },

        // deselect custom match of elementa
        deselectCustomElementsSet: function(elementsSet){
            if (elementsSet && elementsSet.length > 0){
                elementsSet.each(function(pos, el){
                    el = el.instance;
                    if (el && global.editorObj.currentElement.length > 0) {
                        for (var i = 0; i < global.editorObj.currentElement.length; i++) {
                            if ($(el.node).is($(global.editorObj.currentElement[i]))) {
                                global.editorObj.currentElement.splice(i, 1);
                                break;
                            }
                        }
                    }
                    el.removeClass('current');
                    el.removeClass('clicked');
                    el.removeClass('tmp');
                    global.editorObj.copyElement(el, global.editorObj.selectedGroup);
                    el.remove();
                    delete el;
                    if (global.editorObj.currentElement.length == 0){
                        global.editorObj.changeCurrentElement(null);
                    }
                });
                global.selectHandler(global.editorObj.currentElement, true);
            }
        },


        // deselect all elements in editor
        deselectElements: function () {
            global.editorObj.isGroupSelected = false;
            global.editorObj.changeCurrentElement(null);
            if ($('.clicked').length > 0) $('.clicked')[0].instance.removeClass('clicked');
            window.editor.editorObj.removeGroup(window.editor.editorObj.selectedGroup);
            if (global.editorObj.selectArea) {
                global.editorObj.selectArea.remove();
                delete global.editorObj.selectArea;
            }
            global.selectHandler(null);
        },

        // change margin of elements
        addMargin: function (value, type) {
            if (type && value && this.selectedGroup) {
                var margin = parseFloat(value);
                var groupXCenter = global.editorObj.selectedGroup.bbox().cx;
                var groupYCenter = global.editorObj.selectedGroup.bbox().cy;
                this.selectedGroup.each(function () {
                    var elementXCenter = parseFloat(this.bbox().cx) + parseFloat(global.editorObj.selectedGroup.transform().x);
                    var elementYCenter = parseFloat(this.bbox().cy) + parseFloat(global.editorObj.selectedGroup.transform().y);
                    switch (parseFloat(type)) {
                        case 0:
                            if (elementXCenter == groupXCenter) {
                                return false;
                            } else {
                                if (elementXCenter > groupXCenter) {
                                    if (margin > 0) {
                                        this.dx((margin + (elementXCenter - groupXCenter) / 2));
                                    } else if (margin < 0) {
                                        this.dx((margin - (elementXCenter - groupXCenter) / 2));
                                    }
                                } else if (elementXCenter < groupXCenter) {
                                    if (margin > 0) {
                                        this.dx(-(margin + (groupXCenter - elementXCenter) / 2));
                                    } else if (margin < 0) {
                                        this.dx(-(margin - (groupXCenter - elementXCenter) / 2));
                                    }
                                }
                            }
                            break;
                        case 1:
                            if (elementYCenter == groupYCenter) {
                                return false;
                            } else {
                                if (elementYCenter > groupYCenter) {
                                    if (margin > 0) {
                                        this.dy((margin + (elementYCenter - groupYCenter) / 2));
                                    } else if (margin < 0) {
                                        this.dy((margin - (elementYCenter - groupYCenter) / 2));
                                    }
                                } else if (elementYCenter < groupYCenter) {
                                    if (margin > 0) {
                                        this.dy(-(margin + (groupYCenter - elementYCenter) / 2));
                                    } else if (margin < 0) {
                                        this.dy(-(margin - (groupYCenter - elementYCenter) / 2));
                                    }
                                }
                            }
                            break;
                        case 2:
                            // TODO both x and y margin
                            break;
                    }
                });
            } else if (!this.selectedGroup) {
                console.log('No elements selected');
            }
        },

        addReflection: function (type) {
            if (this.selectedGroup) {
                this.selectedGroup.each(function () {
                    switch (type) {
                        case "x":
                            var groupXCenter = parseFloat(global.editorObj.selectedGroup.bbox().cx);
                            var elementXCenter = parseFloat(this.bbox().cx) + parseFloat(global.editorObj.selectedGroup.transform().x);
                            if (elementXCenter > groupXCenter) {
                                this.data('reflection', {type: "x", "value": -(elementXCenter - groupXCenter) * 2});
                            } else if (elementXCenter < groupXCenter) {
                                this.data('reflection', {type: "x", "value": (groupXCenter - elementXCenter) * 2});
                            }
                            break;
                        case "y":
                            var groupYCenter = global.editorObj.selectedGroup.bbox().cy;
                            var elementYCenter = parseFloat(this.bbox().cy) + parseFloat(global.editorObj.selectedGroup.transform().y);
                            if (elementYCenter > groupYCenter) {
                                this.data('reflection', {type: "y", "value": -(elementYCenter - groupYCenter) * 2});
                            } else if (elementYCenter < groupYCenter) {
                                this.data('reflection', {type: "y", "value": (groupYCenter - elementYCenter) * 2});
                            }
                            break;
                    }
                });
                this.selectedGroup.each(function () {
                    if (this.data('reflection')) {
                        var type = this.data('reflection').type;
                        var value = this.data('reflection').value;
                        if (type == "x") {
                            this.dx(value);
                        } else if (type == "y") {
                            this.dy(value);
                        }
                        this.data('reflection', null);
                    }
                });
            } else {
                console.log('Nothing for reflection');
            }
        },

        // move current element with control on some value
        moveElement: function (direction, moveValue) {
            if (this.currentElement != null) {
                if($('#move_value').length > 0 && moveValue == undefined) moveValue = Number($('#move_value').val());
                if (!isNaN(moveValue) && moveValue != 0 && !this.isPreviewPage) {
                    switch (direction) {
                        case 'left':
                            this.selectedGroup.dx(-moveValue);
                            break;
                        case 'top':
                            this.selectedGroup.dy(-moveValue);
                            break;
                        case 'right':
                            this.selectedGroup.dx(moveValue);
                            break;
                        case 'bottom':
                            this.selectedGroup.dy(moveValue);
                            break;
                    }
                }
            } else {
                console.log('Nothing for generalMoving');
            }
        },

        // turn current element with control on some degrees
        turnElement: function (direction, type) {
            if (this.selectedGroup) {
                var moveValue;
                switch (type) {
                    case "group":
                        moveValue = Number($('#turn_group_value').val());
                        break;
                }
                if (!isNaN(moveValue) && moveValue != 0 && moveValue <= 360) {
                    switch (type) {
                        case "group":
                            switch (direction) {
                                case 'left':
                                    this.selectedGroup.rotate(parseInt(this.selectedGroup.transform().rotation) - moveValue, this.selectedGroup.cx(), this.selectedGroup.cy());
                                    break;
                                case 'right':
                                    this.selectedGroup.rotate(parseInt(this.selectedGroup.transform().rotation) + moveValue, this.selectedGroup.cx(), this.selectedGroup.cy());
                                    break;
                            }
                            this.selectedGroup.each(function () {
                                this.rotate(0);
                                this.data('rotation_center', {
                                    'x': global.editorObj.selectedGroup.cx(),
                                    'y': global.editorObj.selectedGroup.cy(),
                                    'value': parseInt(global.editorObj.selectedGroup.transform().rotation) - moveValue
                                });
                            });
                            break;
                    }
                } else {
                    console.log('wrong value for turning' + moveValue);
                }
            } else {
                console.log('Nothing for turning');
            }
        },

        createRectangle: function (params, container) {
            var new_rectangle;
            if (container) {
                new_rectangle = container.rect(params.width, params.height).addClass('rect native').fill(params.fill || "#DDDDDD").stroke(params.stroke || 'none').attr('transform', params.transform || null).attr('rx', params.rx || 20);
            } else {
                new_rectangle = this.nodes.rect(params.width, params.height).addClass('rect native').fill(params.fill || "#DDDDDD").stroke(params.stroke || 'none').attr('transform', params.transform || null).attr('rx', params.rx || 20);
            }
            return new_rectangle;
        },

        createLine: function (params, container) {
            var new_line;
            if (container) {
                new_line = container.line(params.x1, params.y1, params.x2, params.y2).addClass('line').fill("none").attr({
                    'stroke': params.stroke,
                    'stroke-width': params.stroke_width != 0 ? params.stroke_width : 1
                });
            } else {
                new_line = this.mainSVG.line(params.x1, params.y1, params.x2, params.y2).addClass('line').fill("none").attr({
                    'stroke': params.stroke,
                    'stroke-width': params.stroke_width != 0 ? params.stroke_width : 1
                });
            }
            return new_line;
        },

        createText: function (params, container) {
            var new_text;
            if (container) {
                new_text = container.text(function (add) {
                    add.plain(params.text)
                }).addClass('text').attr({
                    'transform': params.transform,
                    'stroke': params.stroke || 'none',
                    'fill': params.fill,
                    'font-family': params.font_family,
                    'font-size': params.font_size
                });
            } else {
                new_text = this.mainSVG.text(function (add) {
                    add.plain(params.text)
                }).addClass('text').attr({
                    'transform': params.transform,
                    'stroke': params.stroke || 'none',
                    'fill': params.fill,
                    'font-family': params.font_family,
                    'font-size': params.font_size
                });
            }
            return new_text;
        },

        //give border radius
        addBorderRadius: function () {
            if (this.selectedGroup) {
                var roundValue = Number($('#round_value').val());
                if (!isNaN(roundValue) && roundValue >= 0) {
                    this.selectedGroup.each(function () {
                        this.radius(roundValue);
                    });
                } else {
                    console.log('wrong value for rounding' + moveValue);
                }
            } else {
                console.log('Nothing for rounding');
            }
        },

        // import foreign svg elements
        importSVG: function () {
            var doc = prompt('Paste raw SVG here:')
            if (doc != null && doc != '') {
                this.setDefaultZoom();
                this.setImport(doc, true);
            }
        },

        // setImported svg elements
        setImport: function (doc, reimport) {
            var just_created,
                addedArr = [],
                addedIds = [],
                importingJustSector = true,
                decorativeCleared = false;
            if (reimport){
                this.nodes.move(0, 0);
                this.setDefaultZoom();
                this.deselectElements();
            }
            this.nodes.svg(doc, function (level) {
                if (reimport) {
                    //console.log(this);
                    this.attr({'id':null,'name': this.attr('id')});
                    var oldElemnt = SVG.get(this.attr('name'));
                    var sectorId;
                    var isNative = false;
                    var elementId = this.attr('id') || this.attr('name');
                    if (elementId && elementId.length > 0) {
                        var neededSearch = elementId.search('sector');
                        sectorId = elementId.substring(neededSearch + 6);
                        if (neededSearch >= 0) isNative = true;
                    }
                    var sectorItem = $('#' + sectorId),
                        allowImportNative = sectorItem.length > 0 && sectorItem.parent().hasClass('active');
                    if (oldElemnt != undefined){
                        var attrb = {
                            'id': oldElemnt.attr('id'),
                            'data_label': oldElemnt.attr('data-label'),
                            'data_selectable': oldElemnt.attr('data-selectable'),
                            'data_joined_to': oldElemnt.attr('data-joined-to'),
                            'class': oldElemnt.attr('class'),
                            'data_type': oldElemnt.attr('data-type'),
                            'data_status': oldElemnt.attr('data-status'),
                            'data_price': oldElemnt.attr('data-price'),
                            'data_server_id': oldElemnt.attr('data-server_id'),
                            'sector_id': oldElemnt.attr('sector_id'),
                            'data_quote_id': oldElemnt.attr('data-quote_id'),
                            'data_count': oldElemnt.attr('data-count'),
                            'data_amount': oldElemnt.attr('data-amount')
                        };
                        this.attr({
                            'data-label': attrb.data_label,
                            'data-selectable': attrb.data_selectable,
                            'data-joined-to': attrb.data_joined_to,
                            'class': attrb.class,
                            'data-type': attrb.data_type,
                            'data-status': attrb.data_status,
                            'data-price': attrb.data_price,
                            'data-server_id': attrb.data_server_id,
                            'sector_id': attrb.sector_id,
                            'data-quote_id': attrb.data_quote_id,
                            'data-count': attrb.data_count,
                            'data-amount': attrb.data_amount
                        });
                        if ((this.hasClass('makroControl') && global.editorObj.isMicroView) || (this.hasClass('native') && this.attr('data-type') != 2 && !global.editorObj.isMicroView)){
                            global.editorObj.removeTotaly(this);
                            return;
                        }
                        if (isNative){
                            if (allowImportNative){
                                global.editorObj.removeTotaly(oldElemnt);
                            }else{
                                global.editorObj.removeTotaly(this);
                            }
                        }else{
                            global.editorObj.removeTotaly(oldElemnt);
                        }
                    }else{
                        if (!isNative && !this.hasClass('makroControl')){
                            if (importingJustSector && !decorativeCleared){
                                importingJustSector = false;
                                decorativeCleared = true;
                                var exc = $('.makroControl');
                                if (addedArr.length > 0){
                                    for (var i = 0; i < addedArr.length; i++){
                                        exc = exc.add(addedArr[i].node);
                                    }
                                }
                                console.log(exc);
                                global.editorObj.deleteImported(exc);
                            }
                        }
                        if (isNative && sectorId && sectorId.length > 0) {
                            if (allowImportNative) {
                                this.addClass('native');
                            }
                        } else {
                            this.addClass('imported');
                        }
                        this.data('selectable', true);
                    }
                    if ((this.hasClass('makroControl') && global.editorObj.isMicroView) || (this.hasClass('native') && this.attr('data-type') != 2 && !global.editorObj.isMicroView)) {
                        global.editorObj.removeTotaly(this);
                        return;
                    }
                } else {
                    //console.log('just created');
                    if (this.hasClass('imported')) {
                        this.data('selectable', true);
                    }
                    if (global.editorObj.visualBox && !$.isEmptyObject(global.editorObj.visualBox)) {
                        this.x(this.x() - global.editorObj.visualBox.minX);
                        this.y(this.y() - global.editorObj.visualBox.minY);
                    }
                }
                just_created = this;
                if (just_created != undefined){
                    addedIds.push(this.attr('name') || this.attr('id'));
                    addedArr.push(this);
                    global.createElementHandler(this);
                }
            });
            this.just_created = just_created;
            if (addedArr.length > 0) {
                for (var i = 0; i < addedArr.length; i++) {
                    if (addedArr[i].attr('id') == undefined || addedArr[i].attr('id') == null) addedArr[i].attr({'id':addedArr[i].attr('name'),'name':null});
                    this.setHoverHandlers(addedArr[i]);
                    if (global.isProductionPage){
                        addedArr[i].off("mousedown")
                            .off("mousemove")
                            .off("mouseup");
                        addedArr[i].on("mousedown", window.EventListeners.mouse_down)
                            .on("mousemove", window.EventListeners.mouse_move)
                            .on("mouseup", window.EventListeners.mouse_up);
                    }
                }
            }
            if (window.loader && window.loader.is(':visible')) window.loader.hide();
        },

        removeTotaly: function(inst){
            inst.remove();
            $(inst.node).remove();
        },

        exportSVG: function () {
            this.setDefaultZoom();
            this.nodes.move(0, 0);
            this.setDefaultZoom();
            var exported = this.mainSVG.exportSvg({
                exclude: function () {
                    return this.data('exclude') || global.editorObj.isEmptyBbox(this.bbox());
                },
                whitespace: '\t'
            });
            var w = window.open();
            var wrapper = $('<pre>');
            $(w.document.body).append(wrapper);
            wrapper.text(exported);
        },

        isEmptyBbox: function(bbox){
            return bbox.x == 0 && bbox.y == 0 && bbox.x2 == 0 && bbox.y2 == 0;
        },

        addScene: function () {
            var sceneByIdLength = $('#scene').length,
                sceneByNameLength = $('[name="scene"]').length;
            if (( sceneByIdLength > 0 || sceneByNameLength > 0 || this.scene) && confirm("Scene already exist. Do you want overwrite it ?")) {
                this.removeScene();
                this.scene = this.createRectangle({width: 200, height: 100}).attr({
                    'id': 'scene',
                    'data-selectable': 'true'
                }).fill('yellow').addClass('imported');
            } else if (sceneByIdLength == 0 && sceneByNameLength == 0 && !this.scene) {
                this.scene = this.createRectangle({width: 200, height: 100}).attr({
                    'id': 'scene',
                    'data-selectable': 'true'
                }).fill('yellow').addClass('imported');
            }
        },

        removeScene: function () {
            var sceneById = $('#scene'),
                sceneByName = $('[name="scene"]');
            if (sceneById.length > 0) {
                sceneById[0].instance.remove();
                sceneById.remove();
                delete this.scene;
            } else if (sceneByName.length > 0) {
                sceneByName[0].instance.remove();
                sceneByName.remove();
                delete this.scene;
            } else {
                alert("Scene is not added");
            }
        },

        // check if ctrl key is pressed
        isCrlPressed: function () {
            if (global.keepPreviousSelected) global.editorObj.ctrlPressed = true;
            $(window).keydown(function (e) {
                if (e.keyCode == 46)  global.editorObj.deleteImported($('.makroControl'));
                if ((e.ctrlKey && !this.isMac()) || (e.keyCode == 91 || e.keyCode == 93) && this.isMac()) {
                    global.editorObj.ctrlPressed = true;
                }
            });
            $(window).keyup(function (e) {
                if ((e.keyCode == 17 && !this.isMac()) || (e.keyCode == 91 || e.keyCode == 93) && this.isMac()) {
                    if (!global.keepPreviousSelected) global.editorObj.ctrlPressed = false;
                }
            });
        },


        // check if shift key is pressed
        isShiftPressed: function () {
            $(window).keydown(function (e) {
                if ((e.keyCode == 16 && !this.isMac()) || (e.keyCode == 91 || e.keyCode == 93) && this.isMac()) { // TODO check keycode for mac
                    global.editorObj.shiftPressed = true;
                }
            });
            $(window).keyup(function (e) {
                if ((e.keyCode == 16 && !this.isMac()) || (e.keyCode == 91 || e.keyCode == 93) && this.isMac()) { // TODO check keycode for mac
                    global.editorObj.shiftPressed = false;
                }
            });
        },


        // parse json data to object
        parseJson: function (json) {
            if (json.length != 0) return JSON.parse(json);
            return false;
        },

        // parse element id from net
        parseNetElementId: function (id) {
            if (id.length != 0) {
                var parsedId = {};
                var row = id.search("row");
                var col = id.search("col");
                var sector = id.search("sector");
                parsedId.row = parseInt(id.substring(row + 3, col));
                parsedId.col = parseInt(id.substring(col + 3, sector));
                return parsedId;
            } else {
                console.log("Element id is empty");
                return false;
            }
        },

        // load external data to editor
        setData: function (json, type) {
            var jsonObj = this.parseJson(json);
            if (!$.isEmptyObject(jsonObj)) {
                switch (type) {
                    case "netDump": // json with data from net
                        if (!$.isEmptyObject(jsonObj.scheme.cell.simple_cell)) {
                            this.buildDefaultSeat(jsonObj.scheme.cell.simple_cell, jsonObj);
                        }
                        break;
                    case "visualDump":
                        if (jsonObj.scheme.visual) {
                            this.setImport(jsonObj.scheme.visual, false);
                        }
                        if (!$.isEmptyObject(jsonObj.scheme.cell.simple_cell)) {
                            this.buildDefaultSeat(jsonObj.scheme.cell.simple_cell, jsonObj);
                        }
                        break;
                    case "fun_zone":
                        if (!$.isEmptyObject(jsonObj.visual)) {
                            if (jsonObj.visual) {
                                this.setImport(jsonObj.visual, false);
                            }
                        } else {
                            var fun_zone = this.createRectangle({
                                fill: jsonObj.fill,
                                width: jsonObj.visual.width || 400,
                                height: jsonObj.visual.height || 200
                            }).attr({'sector_id': jsonObj.sector_id, 'id': jsonObj.id, 'rx': 0}).data('type', jsonObj.type != undefined ? jsonObj.type : 2);
                            if (!global.isPreviewPage) fun_zone.attr('data-selectable', 'true');
                            global.createElementHandler(fun_zone);
                            if (window.loader && window.loader.is(':visible')) window.loader.hide();
                        }
                        break;
                }
            } else {
                console.log("Loaded data is empty");
            }

        },

        // build default seat from structure editor
        buildDefaultSeat: function (elementArray, jsonObj) {
            var elementsArray = [];
            var minRow = Number.MAX_VALUE;
            var maxRow = Number.MIN_VALUE;
            var minCol = Number.MAX_VALUE;
            var maxCol = Number.MIN_VALUE;
            for (var i = 0; i < elementArray.length; i++) {
                // find area for trimming from empty cells
                this.parseNetElementId(elementArray[i].id);
                elementsArray[i] = elementArray[i].id;
                var elRow = this.parseNetElementId(elementArray[i].id).row;
                var elCol = this.parseNetElementId(elementArray[i].id).col;
                minRow = (elRow < minRow) ? elRow : minRow;
                maxRow = (elRow > maxRow) ? elRow : maxRow;
                minCol = (elCol < minCol) ? elCol : minCol;
                maxCol = (elCol > maxCol) ? elCol : maxCol;
            }
            var elementsArrayLength = elementsArray.length;
            if (elementsArrayLength > 0) {
                for (var i = 0; i < elementsArrayLength; i++) {
                    // create seats with right width and margins
                    var seat = this.createRectangle({
                        width: global.seatWidth,
                        height: global.seatHeight,
                        fill: elementArray[i].fill
                    }).attr({'id': elementArray[i].id, 'sector_id': jsonObj.id}).data('type', elementArray[i].type);
                    var seatRow = this.parseNetElementId(elementsArray[i]).row;
                    var seatCol = this.parseNetElementId(elementsArray[i]).col;
                    seat.x((global.seatWidth + global.seatMarginRight) * (Math.abs(seatCol - minCol)));
                    seat.y((global.seatHeight + global.seatMarginBottom) * (Math.abs(seatRow - minRow)));
                    if (global.editorObj.visualBox && !$.isEmptyObject(global.editorObj.visualBox)) {
                        seat.x(seat.x() - global.editorObj.visualBox.minX);
                        seat.y(seat.y() - global.editorObj.visualBox.minY);
                    }
                    if (!$.isEmptyObject(elementArray[i].price_info)) this.setPriceInfo(seat, elementArray[i].price_info);
                    if (elementArray[i].label) seat.data('label', elementArray[i].label);
                    if (elementArray[i].quote_id) seat.data('quote-id', elementArray[i].quote_id);
                    if (elementArray[i].selectable) {
                        seat.data('selectable', elementArray[i].selectable);
                    } else {
                        seat.data('selectable', "false");
                    }
                    this.setHoverHandlers(seat);
                    global.createElementHandler(seat);
                }
            } else {
                console.log("There are no elements selected");
            }
            if (window.loader && window.loader.is(':visible')) window.loader.hide();
        },

        // set price info
        setPriceInfo: function (seat, infoObj) {
            seat.data({
                'price': infoObj.price,
                'server_id': infoObj.server_id,
                'status': infoObj.status
            }).attr('fill', infoObj.fill);
            if (!$.isEmptyObject(infoObj.partner)) { // array pf partners
                seat.data('partner_id', infoObj.partner);
                //seat.data('color', infoObj.color); TODO
            }
            if (seat.data('type') == 2) {
                seat.data({
                    'amount': infoObj.amount,
                    'count': infoObj.count,
                    'sold': infoObj.sold_count
                });
            }
        },

        // set hover handlers
        setHoverHandlers: function (el) {
            if (!global.isMobile) {
                el.on('mouseover', function () {
                    if (!global.editorObj.dragSarted && (!global.dragMode || global.isProductionPage)) {
                        var elLabel = el.data('label');
                        if (elLabel && elLabel.length > 0) {
                            global.editorObj.tooltipCont.text(elLabel).css({
                                left: $(el.node).offset().left,
                                top: $(el.node).offset().top - 30
                            }).show();
                        }
                    }
                });
                el.on('mouseout', function () {
                    if (global.editorObj.tooltipCont.is(':visible')) global.editorObj.tooltipCont.hide().text("");
                });
            }
        },

        // initialize cont for elements labels
        createTooltip: function () {
            this.tooltipCont = $('<div class="tooltipCont">');
            $('body').append(this.tooltipCont.hide());
        },

        // parse element id
        parseNetElementId: function (id) {
            if (id.length != 0) {
                var parsedId = {};
                var row = id.search("row");
                var col = id.search("col");
                var sector = id.search("sector");
                parsedId.row = parseInt(id.substring(row + 3, col));
                parsedId.col = parseInt(id.substring(col + 3, sector));
                return parsedId;
            } else {
                console.log("Element id is empty");
                return false;
            }
        },

        // get specific sector
        getSectorData: function (sector_id) {
            var visualDump = $('[sector_id=' + sector_id + ']');
            return visualDump;
        },

        // get all imported elements
        getImportedElements: function () {
            return global.container.find('.imported').add('#scene');
        },

        // delete imported elements
        deleteImported: function (exception) {
            var exc;
            if (exception && exception.length > 0)  exc = exception;
            if (global.container.find('.imported').length > 0) {
                console.log(global.container.find('.imported').not(exc));
                global.container.find('.imported').not(exc).each(function () {
                    global.editorObj.removeTotaly(this.instance);
                });
            }
        },

        // disable selecting html elements
        disableHtmlSelect: function (boolean) {
            if (boolean) {
                $('body').addClass('blocked');
            } else {
                $('body').removeClass('blocked');
            }
        },

        // change visibility of amount info block
        checkAmountBlockStatus: function (selectedElements) {
            if (selectedElements == null) {
                this.changeVisibility(this.amountInfoBlock, false);
            } else {
                if (typeof selectedElements == 'object') {
                    var isFun = this.isJustFunZones(selectedElements);
                    if (isFun) {
                        this.setInfoToAmountBlock(selectedElements);
                        this.changeVisibility(this.amountInfoBlock, true);
                    } else {
                        this.changeVisibility(this.amountInfoBlock, false);
                    }
                }
            }
        },

        // update amount info block
        setInfoToAmountBlock: function (element) {
            var soldAmount = $('#sold_amount'),
                availableAmount = $('#available_amount'),
                totalAmount = $('#total_amount');
            if (element.length != undefined & element.length > 0) { // multiple selected elements
                var soldA = 0,
                    totalA = 0,
                    availableA = 0;
                element.each(function () {
                    if (this.instance.data('type') == global.editorObj.IDD_FAN_ZONE) {
                        soldA += parseInt(this.instance.data('sold'));
                        totalA += parseInt(this.instance.data('count'));
                        availableA += parseInt(this.instance.data('count')) - parseInt(this.instance.data('sold'));
                    }
                });
                soldAmount.text(soldA);
                totalAmount.text(totalA);
                availableAmount.text(availableA);
            } else { // single selected element
                soldAmount.text(element.data('sold') || 0);
                totalAmount.text(element.data('count') || 0);
                availableAmount.text(parseInt(element.data('count')) - parseInt(element.data('sold')) || 0);
            }
        },

        // check if single selected element is fun zone
        isFunzone: function (element) {
            var elementType = element.data('type');
            var isFunZone = false;
            if (elementType == this.IDD_FAN_ZONE) {
                isFunZone = true;
            }
            return isFunZone;
        },

        // check if all selected elements are fun zones
        isJustFunZones: function (selectedElements) {
            var isFun = false;
            if (selectedElements.length != undefined && selectedElements.length > 0) { // multiple selected elements
                selectedElements.each(function () {
                    if ($(this).data('type') == global.editorObj.IDD_FAN_ZONE) {
                        isFun = true;
                        return;
                    }
                });
            } else { // single selected element
                isFun = this.isFunzone(selectedElements);
            }
            return isFun;
        },

        // change element visibility
        changeVisibility: function (element, visible) {
            if (visible) {
                if (element.css('visibility') == "hidden") element.css({
                    opacity: 0.0,
                    visibility: "visible"
                }).animate({opacity: 1.0});
            } else {
                if (element.css('visibility') == "visible") element.css({
                    opacity: 1.0,
                    visibility: "hidden"
                }).animate({opacity: 0.0});
            }
        },

        // get size of all elements box
        getVisualBox: function (getFrom) {
            var minX = 100000,
                minY = 100000,
                maxX = 0,
                maxY = 0,
                allEl;
            if (getFrom) { allEl = getFrom; } else { allEl = $('svg .imported, svg .native').not('.makroControl'); }
            allEl.each(function () {
                var elInst = this.instance;
                var elBox = elInst.bbox();
                if (elBox.x < minX) minX = elBox.x;
                if (elBox.y < minY) minY = elBox.y;
                if (elBox.x2 > maxX) maxX = elBox.x2;
                if (elBox.y2 > maxY) maxY = elBox.y2;
                /*if (minX < 0){
                 maxX += Math.abs(minX);
                 minX += Math.abs(minX);
                 }
                 if (maxX < 0){
                 minX += Math.abs(maxX);
                 maxX += Math.abs(maxX);
                 }
                 if (minY < 0){
                 maxY += Math.abs(minY);
                 minY += Math.abs(minY);
                 }
                 if (maxY < 0){
                 minY += Math.abs(maxY);
                 maxY += Math.abs(maxY);
                 }*/
            });
            return {minX: Math.round(minX), minY: Math.round(minY), maxX: Math.round(maxX), maxY: Math.round(maxY)};
        },

        // set size of svg box depending on saved box from visual editor
        setVisualBox: function (box) {
            var cont = $(this.mainSVG.parent),
                w, h;
            if (box) {
                if (!$.isEmptyObject(box) && global.isPreviewPage) {
                    w = box.maxX - box.minX + 40;
                    h = box.maxY - box.minY + 40;
                    cont.css({width: w, height: h});
                    cont.attr({'data-width': w, 'data-height': h});
                    this.visualBox = box;
                    this.visualBox.minX -= 20;
                    this.visualBox.minY -= 20;
                    if (w < this.svgChildBlock.width()){
                        this.disableWheelZoom = h < this.svgChildBlock.height();
                        this.neededZoom = 1;
                    }else{
                        this.neededZoom = (this.svgChildBlock.outerWidth()) / cont.width();
                        this.disableWheelZoom = false;
                    }
                }
            } else {
                cont.css({width: 5000, height: 5000});
                cont.attr({'data-width': 5000, 'data-height': 5000});
            }
            this.checkDragControlsVisibility();
        },

        checkDragControlsVisibility: function () {
            if (!global.isMobile) {
                if (!global.isProductionPage){
                    this.dragControlSelect.show();
                    this.dragControlHand.show();
                }else{
                    this.dragControlSelect.hide();
                    this.dragControlHand.hide();
                }
            }
        },

        changeZoomControlsVisibility: function () {
            if (!global.isMobile) window.editor.editorObj.controlsCont.show();
        },

        setTrimmedZoom: function (customZoom) {
            if (global.isMobile && this.mobileInfo.systemName == 'Android' && this.mobileInfo.systemVersion <= 4.2){
                window.editor.editorObj.neededZoom = 0.4;
                $('head').prepend('<meta name="viewport" content="width=device-width, minimum-scale=1.0 initial-scale=0, minimum-scale=0, maximum-scale=5.0"/>');
            }
            if (customZoom != null) window.editor.editorObj.neededZoom = customZoom;
            if (window.editor.editorObj.neededZoom && window.editor.editorObj.neededZoom < 1) {
                var trimmedValue = window.editor.editorObj.neededZoom.toFixed(2);
                window.editor.editorObj.zoom = trimmedValue;
                window.editor.editorObj.zoomElements(trimmedValue);
                if (window.editor.editorObj.scaleControl) {
                    window.editor.editorObj.scaleControl.val(trimmedValue);
                    if (global.isProductionPage){
                        //window.editor.editorObj.minZoom = trimmedValue;
                        //window.editor.editorObj.scaleControl.attr('min', trimmedValue);
                    }
                }
            } else {
                if (window.editor.editorObj.scaleControl && global.isProductionPage){
                    //window.editor.editorObj.minZoom = 0.7;
                    //window.editor.editorObj.scaleControl.attr('min', 0.7);
                }
            }
        },

        clearPreviousScheme: function(){
            this.svgParentNode.html('');
            $('#controls_cont').remove();
            $('#loader').remove();
        },

        createLoader: function(){
            window.loader = $('<div id="loader">');
            this.svgChildBlock.prepend(window.loader);
            window.loader.show();
        },

        initialize: function () {
            this.clearPreviousScheme();
            this.createLoader();
            this.createEditor();
        }

    };

    global.editorObj.initialize();
    return global;

}

!function(t,e){"function"==typeof define&&define.amd?define(e):"object"==typeof exports?module.exports=e():t.SVG=e()}(this,function(){function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),i}function e(t){return t.toLowerCase().replace(/-(.)/g,function(t,e){return e.toUpperCase()})}function i(t){return 4==t.length?["#",t.substring(1,2),t.substring(1,2),t.substring(2,3),t.substring(2,3),t.substring(3,4),t.substring(3,4)].join(""):t}function n(t){var e=t.toString(16);return 1==e.length?"0"+e:e}function r(t,e,i){return(null==e||null==i)&&(null==i?i=t.height/t.width*e:null==e&&(e=t.width/t.height*i)),{width:e,height:i}}function s(t,e){return"number"==typeof t.from?t.from+(t.to-t.from)*e:t instanceof l.Color||t instanceof l.Number?t.at(e):1>e?t.from:t.to}function h(t){for(var e=0,i=t.length,n="";i>e;e++)n+=t[e][0],null!=t[e][1]&&(n+=t[e][1],null!=t[e][2]&&(n+=" ",n+=t[e][2],null!=t[e][3]&&(n+=" ",n+=t[e][3],n+=" ",n+=t[e][4],null!=t[e][5]&&(n+=" ",n+=t[e][5],n+=" ",n+=t[e][6],null!=t[e][7]&&(n+=" ",n+=t[e][7])))));return n+" "}function o(t){t.x2=t.x+t.width,t.y2=t.y+t.height,t.cx=t.x+t.width/2,t.cy=t.y+t.height/2}function a(t){if(t.matrix){var e=t.matrix.replace(/\s/g,"").split(",");6==e.length&&(t.a=parseFloat(e[0]),t.b=parseFloat(e[1]),t.c=parseFloat(e[2]),t.d=parseFloat(e[3]),t.e=parseFloat(e[4]),t.f=parseFloat(e[5]))}return t}function u(t){var e=t.toString().match(l.regex.reference);return e?e[1]:void 0}var l=this.SVG=function(t){return l.supported?(t=new l.Doc(t),l.parser||l.prepare(t),t):void 0};if(l.ns="http://www.w3.org/2000/svg",l.xmlns="http://www.w3.org/2000/xmlns/",l.xlink="http://www.w3.org/1999/xlink",l.did=1e3,l.eid=function(t){return"Svgjs"+t.charAt(0).toUpperCase()+t.slice(1)+l.did++},l.create=function(t){var e=document.createElementNS(this.ns,t);return e.setAttribute("id",this.eid(t)),e},l.extend=function(){var t,e,i,n;for(t=[].slice.call(arguments),e=t.pop(),n=t.length-1;n>=0;n--)if(t[n])for(i in e)t[n].prototype[i]=e[i];l.Set&&l.Set.inherit&&l.Set.inherit()},l.prepare=function(t){var e=document.getElementsByTagName("body")[0],i=(e?new l.Doc(e):t.nested()).size(2,0),n=l.create("path");i.node.appendChild(n),l.parser={body:e||t.parent,draw:i.style("opacity:0;position:fixed;left:100%;top:100%;overflow:hidden"),poly:i.polyline().node,path:n}},l.supported=function(){return!!document.createElementNS&&!!document.createElementNS(l.ns,"svg").createSVGRect}(),!l.supported)return!1;l.get=function(t){var e=document.getElementById(u(t)||t);return e?e.instance:void 0},l.invent=function(t){var e="function"==typeof t.create?t.create:function(){this.constructor.call(this,l.create(t.create))};return t.inherit&&(e.prototype=new t.inherit),t.extend&&l.extend(e,t.extend),t.construct&&l.extend(t.parent||l.Container,t.construct),e},"function"!=typeof t&&(t.prototype=window.Event.prototype,window.CustomEvent=t),function(t){for(var e=0,i=["moz","webkit"],n=0;n<i.length&&!window.requestAnimationFrame;++n)t.requestAnimationFrame=t[i[n]+"RequestAnimationFrame"],t.cancelAnimationFrame=t[i[n]+"CancelAnimationFrame"]||t[i[n]+"CancelRequestAnimationFrame"];t.requestAnimationFrame=t.requestAnimationFrame||function(i){var n=(new Date).getTime(),r=Math.max(0,16-(n-e)),s=t.setTimeout(function(){i(n+r)},r);return e=n+r,s},t.cancelAnimationFrame=t.cancelAnimationFrame||t.clearTimeout}(window),l.regex={unit:/^(-?[\d\.]+)([a-z%]{0,2})$/,hex:/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,rgb:/rgb\((\d+),(\d+),(\d+)\)/,reference:/#([a-z0-9\-_]+)/i,isHex:/^#[a-f0-9]{3,6}$/i,isRgb:/^rgb\(/,isCss:/[^:]+:[^;]+;?/,isBlank:/^(\s+)?$/,isNumber:/^-?[\d\.]+$/,isPercent:/^-?[\d\.]+%$/,isImage:/\.(jpg|jpeg|png|gif)(\?[^=]+.*)?/i,isEvent:/^[\w]+:[\w]+$/},l.defaults={matrix:"1 0 0 1 0 0",attrs:{"fill-opacity":1,"stroke-opacity":1,"stroke-width":0,"stroke-linejoin":"miter","stroke-linecap":"butt",fill:"#000000",stroke:"#000000",opacity:1,x:0,y:0,cx:0,cy:0,width:0,height:0,r:0,rx:0,ry:0,offset:0,"stop-opacity":1,"stop-color":"#000000","font-size":16,"font-family":"Helvetica, Arial, sans-serif","text-anchor":"start"},trans:function(){return{x:0,y:0,scaleX:1,scaleY:1,rotation:0,skewX:0,skewY:0,matrix:this.matrix,a:1,b:0,c:0,d:1,e:0,f:0}}},l.Color=function(t){var e;this.r=0,this.g=0,this.b=0,"string"==typeof t?l.regex.isRgb.test(t)?(e=l.regex.rgb.exec(t.replace(/\s/g,"")),this.r=parseInt(e[1]),this.g=parseInt(e[2]),this.b=parseInt(e[3])):l.regex.isHex.test(t)&&(e=l.regex.hex.exec(i(t)),this.r=parseInt(e[1],16),this.g=parseInt(e[2],16),this.b=parseInt(e[3],16)):"object"==typeof t&&(this.r=t.r,this.g=t.g,this.b=t.b)},l.extend(l.Color,{toString:function(){return this.toHex()},toHex:function(){return"#"+n(this.r)+n(this.g)+n(this.b)},toRgb:function(){return"rgb("+[this.r,this.g,this.b].join()+")"},brightness:function(){return this.r/255*.3+this.g/255*.59+this.b/255*.11},morph:function(t){return this.destination=new l.Color(t),this},at:function(t){return this.destination?(t=0>t?0:t>1?1:t,new l.Color({r:~~(this.r+(this.destination.r-this.r)*t),g:~~(this.g+(this.destination.g-this.g)*t),b:~~(this.b+(this.destination.b-this.b)*t)})):this}}),l.Color.test=function(t){return t+="",l.regex.isHex.test(t)||l.regex.isRgb.test(t)},l.Color.isRgb=function(t){return t&&"number"==typeof t.r&&"number"==typeof t.g&&"number"==typeof t.b},l.Color.isColor=function(t){return l.Color.isRgb(t)||l.Color.test(t)},l.Array=function(t,e){t=(t||[]).valueOf(),0==t.length&&e&&(t=e.valueOf()),this.value=this.parse(t)},l.extend(l.Array,{morph:function(t){if(this.destination=this.parse(t),this.value.length!=this.destination.length){for(var e=this.value[this.value.length-1],i=this.destination[this.destination.length-1];this.value.length>this.destination.length;)this.destination.push(i);for(;this.value.length<this.destination.length;)this.value.push(e)}return this},settle:function(){for(var t=0,e=this.value.length,i=[];e>t;t++)-1==i.indexOf(this.value[t])&&i.push(this.value[t]);return this.value=i},at:function(t){if(!this.destination)return this;for(var e=0,i=this.value.length,n=[];i>e;e++)n.push(this.value[e]+(this.destination[e]-this.value[e])*t);return new l.Array(n)},toString:function(){return this.value.join(" ")},valueOf:function(){return this.value},parse:function(t){return t=t.valueOf(),Array.isArray(t)?t:this.split(t)},split:function(t){return t.replace(/\s+/g," ").replace(/^\s+|\s+$/g,"").split(" ")},reverse:function(){return this.value.reverse(),this}}),l.PointArray=function(){this.constructor.apply(this,arguments)},l.PointArray.prototype=new l.Array,l.extend(l.PointArray,{toString:function(){for(var t=0,e=this.value.length,i=[];e>t;t++)i.push(this.value[t].join(","));return i.join(" ")},at:function(t){if(!this.destination)return this;for(var e=0,i=this.value.length,n=[];i>e;e++)n.push([this.value[e][0]+(this.destination[e][0]-this.value[e][0])*t,this.value[e][1]+(this.destination[e][1]-this.value[e][1])*t]);return new l.PointArray(n)},parse:function(t){if(t=t.valueOf(),Array.isArray(t))return t;t=this.split(t);for(var e,i=0,n=t.length,r=[];n>i;i++)e=t[i].split(","),r.push([parseFloat(e[0]),parseFloat(e[1])]);return r},move:function(t,e){var i=this.bbox();if(t-=i.x,e-=i.y,!isNaN(t)&&!isNaN(e))for(var n=this.value.length-1;n>=0;n--)this.value[n]=[this.value[n][0]+t,this.value[n][1]+e];return this},size:function(t,e){var i,n=this.bbox();for(i=this.value.length-1;i>=0;i--)this.value[i][0]=(this.value[i][0]-n.x)*t/n.width+n.x,this.value[i][1]=(this.value[i][1]-n.y)*e/n.height+n.y;return this},bbox:function(){return l.parser.poly.setAttribute("points",this.toString()),l.parser.poly.getBBox()}}),l.PathArray=function(t,e){this.constructor.call(this,t,e)},l.PathArray.prototype=new l.Array,l.extend(l.PathArray,{toString:function(){return h(this.value)},move:function(t,e){var i=this.bbox();if(t-=i.x,e-=i.y,!isNaN(t)&&!isNaN(e))for(var n,r=this.value.length-1;r>=0;r--)n=this.value[r][0],"M"==n||"L"==n||"T"==n?(this.value[r][1]+=t,this.value[r][2]+=e):"H"==n?this.value[r][1]+=t:"V"==n?this.value[r][1]+=e:"C"==n||"S"==n||"Q"==n?(this.value[r][1]+=t,this.value[r][2]+=e,this.value[r][3]+=t,this.value[r][4]+=e,"C"==n&&(this.value[r][5]+=t,this.value[r][6]+=e)):"A"==n&&(this.value[r][6]+=t,this.value[r][7]+=e);return this},size:function(t,e){var i,n,r=this.bbox();for(i=this.value.length-1;i>=0;i--)n=this.value[i][0],"M"==n||"L"==n||"T"==n?(this.value[i][1]=(this.value[i][1]-r.x)*t/r.width+r.x,this.value[i][2]=(this.value[i][2]-r.y)*e/r.height+r.y):"H"==n?this.value[i][1]=(this.value[i][1]-r.x)*t/r.width+r.x:"V"==n?this.value[i][1]=(this.value[i][1]-r.y)*e/r.height+r.y:"C"==n||"S"==n||"Q"==n?(this.value[i][1]=(this.value[i][1]-r.x)*t/r.width+r.x,this.value[i][2]=(this.value[i][2]-r.y)*e/r.height+r.y,this.value[i][3]=(this.value[i][3]-r.x)*t/r.width+r.x,this.value[i][4]=(this.value[i][4]-r.y)*e/r.height+r.y,"C"==n&&(this.value[i][5]=(this.value[i][5]-r.x)*t/r.width+r.x,this.value[i][6]=(this.value[i][6]-r.y)*e/r.height+r.y)):"A"==n&&(this.value[i][1]=this.value[i][1]*t/r.width,this.value[i][2]=this.value[i][2]*e/r.height,this.value[i][6]=(this.value[i][6]-r.x)*t/r.width+r.x,this.value[i][7]=(this.value[i][7]-r.y)*e/r.height+r.y);return this},parse:function(t){if(t instanceof l.PathArray)return t.valueOf();var e,i,n,r,s,o,a,u,c,f,d,p=0,m=0;for(l.parser.path.setAttribute("d","string"==typeof t?t:h(t)),d=l.parser.path.pathSegList,e=0,i=d.numberOfItems;i>e;++e)f=d.getItem(e),c=f.pathSegTypeAsLetter,"M"==c||"L"==c||"H"==c||"V"==c||"C"==c||"S"==c||"Q"==c||"T"==c||"A"==c?("x"in f&&(p=f.x),"y"in f&&(m=f.y)):("x1"in f&&(s=p+f.x1),"x2"in f&&(a=p+f.x2),"y1"in f&&(o=m+f.y1),"y2"in f&&(u=m+f.y2),"x"in f&&(p+=f.x),"y"in f&&(m+=f.y),"m"==c?d.replaceItem(l.parser.path.createSVGPathSegMovetoAbs(p,m),e):"l"==c?d.replaceItem(l.parser.path.createSVGPathSegLinetoAbs(p,m),e):"h"==c?d.replaceItem(l.parser.path.createSVGPathSegLinetoHorizontalAbs(p),e):"v"==c?d.replaceItem(l.parser.path.createSVGPathSegLinetoVerticalAbs(m),e):"c"==c?d.replaceItem(l.parser.path.createSVGPathSegCurvetoCubicAbs(p,m,s,o,a,u),e):"s"==c?d.replaceItem(l.parser.path.createSVGPathSegCurvetoCubicSmoothAbs(p,m,a,u),e):"q"==c?d.replaceItem(l.parser.path.createSVGPathSegCurvetoQuadraticAbs(p,m,s,o),e):"t"==c?d.replaceItem(l.parser.path.createSVGPathSegCurvetoQuadraticSmoothAbs(p,m),e):"a"==c?d.replaceItem(l.parser.path.createSVGPathSegArcAbs(p,m,f.r1,f.r2,f.angle,f.largeArcFlag,f.sweepFlag),e):("z"==c||"Z"==c)&&(p=n,m=r)),("M"==c||"m"==c)&&(n=p,r=m);for(t=[],d=l.parser.path.pathSegList,e=0,i=d.numberOfItems;i>e;++e)f=d.getItem(e),c=f.pathSegTypeAsLetter,p=[c],"M"==c||"L"==c||"T"==c?p.push(f.x,f.y):"H"==c?p.push(f.x):"V"==c?p.push(f.y):"C"==c?p.push(f.x1,f.y1,f.x2,f.y2,f.x,f.y):"S"==c?p.push(f.x2,f.y2,f.x,f.y):"Q"==c?p.push(f.x1,f.y1,f.x,f.y):"A"==c&&p.push(f.r1,f.r2,f.angle,0|f.largeArcFlag,0|f.sweepFlag,f.x,f.y),t.push(p);return t},bbox:function(){return l.parser.path.setAttribute("d",this.toString()),l.parser.path.getBBox()}}),l.Number=function(t){if(this.value=0,this.unit="","number"==typeof t)this.value=isNaN(t)?0:isFinite(t)?t:0>t?-3.4e38:3.4e38;else if("string"==typeof t){var e=t.match(l.regex.unit);e&&(this.value=parseFloat(e[1]),"%"==e[2]?this.value/=100:"s"==e[2]&&(this.value*=1e3),this.unit=e[2])}else t instanceof l.Number&&(this.value=t.value,this.unit=t.unit)},l.extend(l.Number,{toString:function(){return("%"==this.unit?~~(1e8*this.value)/1e6:"s"==this.unit?this.value/1e3:this.value)+this.unit},valueOf:function(){return this.value},plus:function(t){return this.value=this+new l.Number(t),this},minus:function(t){return this.plus(-new l.Number(t))},times:function(t){return this.value=this*new l.Number(t),this},divide:function(t){return this.value=this/new l.Number(t),this},to:function(t){return"string"==typeof t&&(this.unit=t),this},morph:function(t){return this.destination=new l.Number(t),this},at:function(t){return this.destination?new l.Number(this.destination).minus(this).times(t).plus(this):this}}),l.ViewBox=function(t){var e,i,n,r,s=1,h=1,o=t.bbox(),a=(t.attr("viewBox")||"").match(/-?[\d\.]+/g),u=t,c=t;for(n=new l.Number(t.width()),r=new l.Number(t.height());"%"==n.unit;)s*=n.value,n=new l.Number(u instanceof l.Doc?u.parent.offsetWidth:u.parent.width()),u=u.parent;for(;"%"==r.unit;)h*=r.value,r=new l.Number(c instanceof l.Doc?c.parent.offsetHeight:c.parent.height()),c=c.parent;this.x=o.x,this.y=o.y,this.width=n*s,this.height=r*h,this.zoom=1,a&&(e=parseFloat(a[0]),i=parseFloat(a[1]),n=parseFloat(a[2]),r=parseFloat(a[3]),this.zoom=this.width/this.height>n/r?this.height/r:this.width/n,this.x=e,this.y=i,this.width=n,this.height=r)},l.extend(l.ViewBox,{toString:function(){return this.x+" "+this.y+" "+this.width+" "+this.height}}),l.BBox=function(t){var e;if(this.x=0,this.y=0,this.width=0,this.height=0,t){try{e=t.node.getBBox()}catch(i){e={x:t.node.clientLeft,y:t.node.clientTop,width:t.node.clientWidth,height:t.node.clientHeight}}this.x=e.x+t.trans.x,this.y=e.y+t.trans.y,this.width=e.width*t.trans.scaleX,this.height=e.height*t.trans.scaleY}o(this)},l.extend(l.BBox,{merge:function(t){var e=new l.BBox;return e.x=Math.min(this.x,t.x),e.y=Math.min(this.y,t.y),e.width=Math.max(this.x+this.width,t.x+t.width)-e.x,e.height=Math.max(this.y+this.height,t.y+t.height)-e.y,o(e),e}}),l.RBox=function(t){var e,i,n={};if(this.x=0,this.y=0,this.width=0,this.height=0,t){for(e=t.doc().parent,i=t.doc().viewbox().zoom,n=t.node.getBoundingClientRect(),this.x=n.left,this.y=n.top,this.x-=e.offsetLeft,this.y-=e.offsetTop;e=e.offsetParent;)this.x-=e.offsetLeft,this.y-=e.offsetTop;for(e=t;e=e.parent;)"svg"==e.type&&e.viewbox&&(i*=e.viewbox().zoom,this.x-=e.x()||0,this.y-=e.y()||0)}this.x/=i,this.y/=i,this.width=n.width/=i,this.height=n.height/=i,this.x+="number"==typeof window.scrollX?window.scrollX:window.pageXOffset,this.y+="number"==typeof window.scrollY?window.scrollY:window.pageYOffset,o(this)},l.extend(l.RBox,{merge:function(t){var e=new l.RBox;return e.x=Math.min(this.x,t.x),e.y=Math.min(this.y,t.y),e.width=Math.max(this.x+this.width,t.x+t.width)-e.x,e.height=Math.max(this.y+this.height,t.y+t.height)-e.y,o(e),e}}),l.Element=l.invent({create:function(t){this._stroke=l.defaults.attrs.stroke,this.trans=l.defaults.trans(),(this.node=t)&&(this.type=t.nodeName,this.node.instance=this)},extend:{x:function(t){return null!=t&&(t=new l.Number(t),t.value/=this.trans.scaleX),this.attr("x",t)},y:function(t){return null!=t&&(t=new l.Number(t),t.value/=this.trans.scaleY),this.attr("y",t)},cx:function(t){return null==t?this.x()+this.width()/2:this.x(t-this.width()/2)},cy:function(t){return null==t?this.y()+this.height()/2:this.y(t-this.height()/2)},move:function(t,e){return this.x(t).y(e)},center:function(t,e){return this.cx(t).cy(e)},width:function(t){return this.attr("width",t)},height:function(t){return this.attr("height",t)},size:function(t,e){var i=r(this.bbox(),t,e);return this.width(new l.Number(i.width)).height(new l.Number(i.height))},clone:function(){var t,e,i=this.type;return t="rect"==i||"ellipse"==i?this.parent[i](0,0):"line"==i?this.parent[i](0,0,0,0):"image"==i?this.parent[i](this.src):"text"==i?this.parent[i](this.content):"path"==i?this.parent[i](this.attr("d")):"polyline"==i||"polygon"==i?this.parent[i](this.attr("points")):"g"==i?this.parent.group():this.parent[i](),e=this.attr(),delete e.id,t.attr(e),t.trans=this.trans,t.transform({})},remove:function(){return this.parent&&this.parent.removeElement(this),this},replace:function(t){return this.after(t).remove(),t},addTo:function(t){return t.put(this)},putIn:function(t){return t.add(this)},doc:function(t){return this._parent(t||l.Doc)},attr:function(t,e,i){if(null==t){for(t={},e=this.node.attributes,i=e.length-1;i>=0;i--)t[e[i].nodeName]=l.regex.isNumber.test(e[i].nodeValue)?parseFloat(e[i].nodeValue):e[i].nodeValue;return t}if("object"==typeof t)for(e in t)this.attr(e,t[e]);else if(null===e)this.node.removeAttribute(t);else{if(null==e)return e=this.node.attributes[t],null==e?l.defaults.attrs[t]:l.regex.isNumber.test(e.nodeValue)?parseFloat(e.nodeValue):e.nodeValue;if("style"==t)return this.style(e);"stroke-width"==t?this.attr("stroke",parseFloat(e)>0?this._stroke:null):"stroke"==t&&(this._stroke=e),("fill"==t||"stroke"==t)&&(l.regex.isImage.test(e)&&(e=this.doc().defs().image(e,0,0)),e instanceof l.Image&&(e=this.doc().defs().pattern(0,0,function(){this.add(e)}))),"number"==typeof e?e=new l.Number(e):l.Color.isColor(e)?e=new l.Color(e):Array.isArray(e)&&(e=new l.Array(e)),"leading"==t?this.leading&&this.leading(e):"string"==typeof i?this.node.setAttributeNS(i,t,e.toString()):this.node.setAttribute(t,e.toString()),!this.rebuild||"font-size"!=t&&"x"!=t||this.rebuild(t,e)}return this},transform:function(t,e){if(0==arguments.length)return this.trans;if("string"==typeof t){if(arguments.length<2)return this.trans[t];var i={};return i[t]=e,this.transform(i)}var i=[];t=a(t);for(e in t)null!=t[e]&&(this.trans[e]=t[e]);return this.trans.matrix=this.trans.a+" "+this.trans.b+" "+this.trans.c+" "+this.trans.d+" "+this.trans.e+" "+this.trans.f,t=this.trans,t.matrix!=l.defaults.matrix&&i.push("matrix("+t.matrix+")"),0!=t.rotation&&i.push("rotate("+t.rotation+" "+(null==t.cx?this.bbox().cx:t.cx)+" "+(null==t.cy?this.bbox().cy:t.cy)+")"),(1!=t.scaleX||1!=t.scaleY)&&i.push("scale("+t.scaleX+" "+t.scaleY+")"),0!=t.skewX&&i.push("skewX("+t.skewX+")"),0!=t.skewY&&i.push("skewY("+t.skewY+")"),(0!=t.x||0!=t.y)&&i.push("translate("+new l.Number(t.x/t.scaleX)+" "+new l.Number(t.y/t.scaleY)+")"),0==i.length?this.node.removeAttribute("transform"):this.node.setAttribute("transform",i.join(" ")),this},style:function(t,i){if(0==arguments.length)return this.node.style.cssText||"";if(arguments.length<2)if("object"==typeof t)for(i in t)this.style(i,t[i]);else{if(!l.regex.isCss.test(t))return this.node.style[e(t)];t=t.split(";");for(var n=0;n<t.length;n++)i=t[n].split(":"),this.style(i[0].replace(/\s+/g,""),i[1])}else this.node.style[e(t)]=null===i||l.regex.isBlank.test(i)?"":i;return this},id:function(t){return this.attr("id",t)},bbox:function(){return new l.BBox(this)},rbox:function(){return new l.RBox(this)},inside:function(t,e){var i=this.bbox();return t>i.x&&e>i.y&&t<i.x+i.width&&e<i.y+i.height},show:function(){return this.style("display","")},hide:function(){return this.style("display","none")},visible:function(){return"none"!=this.style("display")},toString:function(){return this.attr("id")},classes:function(){var t=this.node.getAttribute("class");return null===t?[]:t.trim().split(/\s+/)},hasClass:function(t){return-1!=this.classes().indexOf(t)},addClass:function(t){var e;return this.hasClass(t)||(e=this.classes(),e.push(t),this.node.setAttribute("class",e.join(" "))),this},removeClass:function(t){var e;return this.hasClass(t)&&(e=this.classes().filter(function(e){return e!=t}),this.node.setAttribute("class",e.join(" "))),this},toggleClass:function(t){return this.hasClass(t)?this.removeClass(t):this.addClass(t),this},reference:function(t){return l.get(this.attr()[t])},_parent:function(t){for(var e=this;null!=e&&!(e instanceof t);)e=e.parent;return e}}}),l.Parent=l.invent({create:function(t){this.constructor.call(this,t)},inherit:l.Element,extend:{children:function(){return this._children||(this._children=[])},add:function(t,e){return this.has(t)||(e=null==e?this.children().length:e,t.parent&&t.parent.children().splice(t.parent.index(t),1),this.children().splice(e,0,t),this.node.insertBefore(t.node,this.node.childNodes[e]||null),t.parent=this),this._defs&&(this.node.removeChild(this._defs.node),this.node.appendChild(this._defs.node)),this},put:function(t,e){return this.add(t,e),t},has:function(t){return this.index(t)>=0},index:function(t){return this.children().indexOf(t)},get:function(t){return this.children()[t]},first:function(){return this.children()[0]},last:function(){return this.children()[this.children().length-1]},each:function(t,e){var i,n,r=this.children();for(i=0,n=r.length;n>i;i++)r[i]instanceof l.Element&&t.apply(r[i],[i,r]),e&&r[i]instanceof l.Container&&r[i].each(t,e);return this},removeElement:function(t){return this.children().splice(this.index(t),1),this.node.removeChild(t.node),t.parent=null,this},clear:function(){for(var t=this.children().length-1;t>=0;t--)this.removeElement(this.children()[t]);return this._defs&&this._defs.clear(),this},defs:function(){return this.doc().defs()}}}),l.Container=l.invent({create:function(t){this.constructor.call(this,t)},inherit:l.Parent,extend:{viewbox:function(t){return 0==arguments.length?new l.ViewBox(this):(t=1==arguments.length?[t.x,t.y,t.width,t.height]:[].slice.call(arguments),this.attr("viewBox",t))}}}),l.FX=l.invent({create:function(t){this.target=t},extend:{animate:function(t,e,i){var n,r,h,o,a=this.target,u=this;return"object"==typeof t&&(i=t.delay,e=t.ease,t=t.duration),t="="==t?t:null==t?1e3:new l.Number(t).valueOf(),e=e||"<>",u.to=function(t){var i;if(t=0>t?0:t>1?1:t,null==n){n=[];for(o in u.attrs)n.push(o);if(a.morphArray&&(u._plot||n.indexOf("points")>-1)){var l,c=new a.morphArray(u._plot||u.attrs.points||a.array);u._size&&c.size(u._size.width.to,u._size.height.to),l=c.bbox(),u._x?c.move(u._x.to,l.y):u._cx&&c.move(u._cx.to-l.width/2,l.y),l=c.bbox(),u._y?c.move(l.x,u._y.to):u._cy&&c.move(l.x,u._cy.to-l.height/2),delete u._x,delete u._y,delete u._cx,delete u._cy,delete u._size,u._plot=a.array.morph(c)}}if(null==r){r=[];for(o in u.trans)r.push(o)}if(null==h){h=[];for(o in u.styles)h.push(o)}for(t="<>"==e?-Math.cos(t*Math.PI)/2+.5:">"==e?Math.sin(t*Math.PI/2):"<"==e?-Math.cos(t*Math.PI/2)+1:"-"==e?t:"function"==typeof e?e(t):t,u._plot?a.plot(u._plot.at(t)):(u._x?a.x(u._x.at(t)):u._cx&&a.cx(u._cx.at(t)),u._y?a.y(u._y.at(t)):u._cy&&a.cy(u._cy.at(t)),u._size&&a.size(u._size.width.at(t),u._size.height.at(t))),u._viewbox&&a.viewbox(u._viewbox.x.at(t),u._viewbox.y.at(t),u._viewbox.width.at(t),u._viewbox.height.at(t)),u._leading&&a.leading(u._leading.at(t)),i=n.length-1;i>=0;i--)a.attr(n[i],s(u.attrs[n[i]],t));for(i=r.length-1;i>=0;i--)a.transform(r[i],s(u.trans[r[i]],t));for(i=h.length-1;i>=0;i--)a.style(h[i],s(u.styles[h[i]],t));u._during&&u._during.call(a,t,function(e,i){return s({from:e,to:i},t)})},"number"==typeof t&&(this.timeout=setTimeout(function(){var n=(new Date).getTime();u.situation={interval:1e3/60,start:n,play:!0,finish:n+t,duration:t},u.render=function(){if(u.situation.play===!0){var n=(new Date).getTime(),r=n>u.situation.finish?1:(n-u.situation.start)/t;u.to(r),n>u.situation.finish?(u._plot&&a.plot(new l.PointArray(u._plot.destination).settle()),u._loop===!0||"number"==typeof u._loop&&u._loop>1?("number"==typeof u._loop&&--u._loop,u.animate(t,e,i)):u._after?u._after.apply(a,[u]):u.stop()):u.animationFrame=requestAnimationFrame(u.render)}else u.animationFrame=requestAnimationFrame(u.render)},u.render()},new l.Number(i).valueOf())),this},bbox:function(){return this.target.bbox()},attr:function(t,e){if("object"==typeof t)for(var i in t)this.attr(i,t[i]);else{var n=this.target.attr(t);this.attrs[t]=l.Color.isColor(n)?new l.Color(n).morph(e):l.regex.unit.test(n)?new l.Number(n).morph(e):{from:n,to:e}}return this},transform:function(t,e){if(1==arguments.length){t=a(t),delete t.matrix,this.target.trans.cx=t.cx||null,this.target.trans.cy=t.cy||null,delete t.cx,delete t.cy;for(e in t)this.trans[e]={from:this.target.trans[e],to:t[e]}}else{var i={};i[t]=e,this.transform(i)}return this},style:function(t,e){if("object"==typeof t)for(var i in t)this.style(i,t[i]);else this.styles[t]={from:this.target.style(t),to:e};return this},x:function(t){return this._x=new l.Number(this.target.x()).morph(t),this},y:function(t){return this._y=new l.Number(this.target.y()).morph(t),this},cx:function(t){return this._cx=new l.Number(this.target.cx()).morph(t),this},cy:function(t){return this._cy=new l.Number(this.target.cy()).morph(t),this},move:function(t,e){return this.x(t).y(e)},center:function(t,e){return this.cx(t).cy(e)},size:function(t,e){if(this.target instanceof l.Text)this.attr("font-size",t);else{var i=this.target.bbox();this._size={width:new l.Number(i.width).morph(t),height:new l.Number(i.height).morph(e)}}return this},plot:function(t){return this._plot=t,this},leading:function(t){return this.target._leading&&(this._leading=new l.Number(this.target._leading).morph(t)),this},viewbox:function(t,e,i,n){if(this.target instanceof l.Container){var r=this.target.viewbox();this._viewbox={x:new l.Number(r.x).morph(t),y:new l.Number(r.y).morph(e),width:new l.Number(r.width).morph(i),height:new l.Number(r.height).morph(n)}}return this},update:function(t){return this.target instanceof l.Stop&&(null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",new l.Number(t.offset))),this},during:function(t){return this._during=t,this},after:function(t){return this._after=t,this},loop:function(t){return this._loop=t||!0,this},stop:function(t){return t===!0?(this.animate(0),this._after&&this._after.apply(this.target,[this])):(clearTimeout(this.timeout),cancelAnimationFrame(this.animationFrame),this.attrs={},this.trans={},this.styles={},this.situation={},delete this._x,delete this._y,delete this._cx,delete this._cy,delete this._size,delete this._plot,delete this._loop,delete this._after,delete this._during,delete this._leading,delete this._viewbox),this},pause:function(){return this.situation.play===!0&&(this.situation.play=!1,this.situation.pause=(new Date).getTime()),this},play:function(){if(this.situation.play===!1){var t=(new Date).getTime()-this.situation.pause;this.situation.finish+=t,this.situation.start+=t,this.situation.play=!0}return this}},parent:l.Element,construct:{animate:function(t,e,i){return(this.fx||(this.fx=new l.FX(this))).stop().animate(t,e,i)},stop:function(t){return this.fx&&this.fx.stop(t),this},pause:function(){return this.fx&&this.fx.pause(),this},play:function(){return this.fx&&this.fx.play(),this}}}),l.extend(l.Element,l.FX,{dx:function(t){return this.x((this.target||this).x()+t)},dy:function(t){return this.y((this.target||this).y()+t)},dmove:function(t,e){return this.dx(t).dy(e)}}),["click","dblclick","mousedown","mouseup","mouseover","mouseout","mousemove","touchstart","touchmove","touchleave","touchend","touchcancel"].forEach(function(t){l.Element.prototype[t]=function(e){var i=this;return this.node["on"+t]="function"==typeof e?function(){return e.apply(i,arguments)}:null,this}}),l.listeners=[],l.handlerMap=[],l.registerEvent=function(){},l.on=function(t,e,i){var n=i.bind(t.instance||t),r=(l.handlerMap.indexOf(t)+1||l.handlerMap.push(t))-1,s=e.split(".")[0],h=e.split(".")[1]||"*";l.listeners[r]=l.listeners[r]||{},l.listeners[r][s]=l.listeners[r][s]||{},l.listeners[r][s][h]=l.listeners[r][s][h]||{},l.listeners[r][s][h][i]=n,t.addEventListener(s,n,!1)},l.off=function(t,e,i){var n=l.handlerMap.indexOf(t),r=e&&e.split(".")[0],s=e&&e.split(".")[1];if(-1!=n)if(i)l.listeners[n][r]&&l.listeners[n][r][s||"*"]&&(t.removeEventListener(r,l.listeners[n][r][s||"*"][i],!1),delete l.listeners[n][r][s||"*"][i]);else if(s){if(l.listeners[n][r]&&l.listeners[n][r][s]){for(i in l.listeners[n][r][s])l.off(t,[r,s].join("."),i);delete l.listeners[n][r][s]}}else if(r){if(l.listeners[n][r]){for(namespace in l.listeners[n][r])l.off(t,[r,namespace].join("."));delete l.listeners[n][r]}}else{for(e in l.listeners[n])l.off(t,e);delete l.listeners[n]}},l.extend(l.Element,{on:function(t,e){return l.on(this.node,t,e),this},off:function(t,e){return l.off(this.node,t,e),this},fire:function(e,i){return this.node.dispatchEvent(new t(e,{detail:i})),this}}),l.Defs=l.invent({create:"defs",inherit:l.Container}),l.G=l.invent({create:"g",inherit:l.Container,extend:{x:function(t){return null==t?this.trans.x:this.transform("x",t)},y:function(t){return null==t?this.trans.y:this.transform("y",t)},cx:function(t){return null==t?this.bbox().cx:this.x(t-this.bbox().width/2)},cy:function(t){return null==t?this.bbox().cy:this.y(t-this.bbox().height/2)}},construct:{group:function(){return this.put(new l.G)}}}),l.extend(l.Element,{siblings:function(){return this.parent.children()},position:function(){return this.parent.index(this)},next:function(){return this.siblings()[this.position()+1]},previous:function(){return this.siblings()[this.position()-1]},forward:function(){var t=this.position();return this.parent.removeElement(this).put(this,t+1)},backward:function(){var t=this.position();return t>0&&this.parent.removeElement(this).add(this,t-1),this},front:function(){return this.parent.removeElement(this).put(this)},back:function(){return this.position()>0&&this.parent.removeElement(this).add(this,0),this},before:function(t){t.remove();var e=this.position();return this.parent.add(t,e),this},after:function(t){t.remove();var e=this.position();return this.parent.add(t,e+1),this}}),l.Mask=l.invent({create:function(){this.constructor.call(this,l.create("mask")),this.targets=[]},inherit:l.Container,extend:{remove:function(){for(var t=this.targets.length-1;t>=0;t--)this.targets[t]&&this.targets[t].unmask();return delete this.targets,this.parent.removeElement(this),this}},construct:{mask:function(){return this.defs().put(new l.Mask)}}}),l.extend(l.Element,{maskWith:function(t){return this.masker=t instanceof l.Mask?t:this.parent.mask().add(t),this.masker.targets.push(this),this.attr("mask",'url("#'+this.masker.attr("id")+'")')},unmask:function(){return delete this.masker,this.attr("mask",null)}}),l.Clip=l.invent({create:function(){this.constructor.call(this,l.create("clipPath")),this.targets=[]},inherit:l.Container,extend:{remove:function(){for(var t=this.targets.length-1;t>=0;t--)this.targets[t]&&this.targets[t].unclip();return delete this.targets,this.parent.removeElement(this),this}},construct:{clip:function(){return this.defs().put(new l.Clip)}}}),l.extend(l.Element,{clipWith:function(t){return this.clipper=t instanceof l.Clip?t:this.parent.clip().add(t),this.clipper.targets.push(this),this.attr("clip-path",'url("#'+this.clipper.attr("id")+'")')},unclip:function(){return delete this.clipper,this.attr("clip-path",null)}}),l.Gradient=l.invent({create:function(t){this.constructor.call(this,l.create(t+"Gradient")),this.type=t},inherit:l.Container,extend:{from:function(t,e){return this.attr("radial"==this.type?{fx:new l.Number(t),fy:new l.Number(e)}:{x1:new l.Number(t),y1:new l.Number(e)})},to:function(t,e){return this.attr("radial"==this.type?{cx:new l.Number(t),cy:new l.Number(e)}:{x2:new l.Number(t),y2:new l.Number(e)})},radius:function(t){return"radial"==this.type?this.attr({r:new l.Number(t)}):this},at:function(t,e,i){return this.put(new l.Stop).update(t,e,i)},update:function(t){return this.clear(),"function"==typeof t&&t.call(this,this),this},fill:function(){return"url(#"+this.id()+")"},toString:function(){return this.fill()}},construct:{gradient:function(t,e){return this.defs().gradient(t,e)}}}),l.extend(l.Defs,{gradient:function(t,e){return this.put(new l.Gradient(t)).update(e)}}),l.Stop=l.invent({create:"stop",inherit:l.Element,extend:{update:function(t){return("number"==typeof t||t instanceof l.Number)&&(t={offset:arguments[0],color:arguments[1],opacity:arguments[2]}),null!=t.opacity&&this.attr("stop-opacity",t.opacity),null!=t.color&&this.attr("stop-color",t.color),null!=t.offset&&this.attr("offset",new l.Number(t.offset)),this}}}),l.Pattern=l.invent({create:"pattern",inherit:l.Container,extend:{fill:function(){return"url(#"+this.id()+")"},update:function(t){return this.clear(),"function"==typeof t&&t.call(this,this),this},toString:function(){return this.fill()}},construct:{pattern:function(t,e,i){return this.defs().pattern(t,e,i)}}}),l.extend(l.Defs,{pattern:function(t,e,i){return this.put(new l.Pattern).update(i).attr({x:0,y:0,width:t,height:e,patternUnits:"userSpaceOnUse"})}}),l.Doc=l.invent({create:function(t){this.parent="string"==typeof t?document.getElementById(t):t,this.constructor.call(this,"svg"==this.parent.nodeName?this.parent:l.create("svg")),this.attr({xmlns:l.ns,version:"1.1",width:"100%",height:"100%"}).attr("xmlns:xlink",l.xlink,l.xmlns),this._defs=new l.Defs,this._defs.parent=this,this.node.appendChild(this._defs.node),this.doSpof=!1,this.parent!=this.node&&this.stage()},inherit:l.Container,extend:{stage:function(){var t=this;return this.parent.appendChild(this.node),t.spof(),l.on(window,"resize",function(){t.spof()}),this},defs:function(){return this._defs},spof:function(){if(this.doSpof){var t=this.node.getScreenCTM();t&&this.style("left",-t.e%1+"px").style("top",-t.f%1+"px")}return this},fixSubPixelOffset:function(){return this.doSpof=!0,this},remove:function(){return this.parent&&(this.parent.removeChild(this.node),this.parent=null),this}}}),l.Shape=l.invent({create:function(t){this.constructor.call(this,t)},inherit:l.Element}),l.Symbol=l.invent({create:"symbol",inherit:l.Container,construct:{symbol:function(){return this.defs().put(new l.Symbol)
}}}),l.Use=l.invent({create:"use",inherit:l.Shape,extend:{element:function(t){return this.target=t,this.attr("href","#"+t,l.xlink)}},construct:{use:function(t){return this.put(new l.Use).element(t)}}}),l.Rect=l.invent({create:"rect",inherit:l.Shape,construct:{rect:function(t,e){return this.put((new l.Rect).size(t,e))}}}),l.Ellipse=l.invent({create:"ellipse",inherit:l.Shape,extend:{x:function(t){return null==t?this.cx()-this.attr("rx"):this.cx(t+this.attr("rx"))},y:function(t){return null==t?this.cy()-this.attr("ry"):this.cy(t+this.attr("ry"))},cx:function(t){return null==t?this.attr("cx"):this.attr("cx",new l.Number(t).divide(this.trans.scaleX))},cy:function(t){return null==t?this.attr("cy"):this.attr("cy",new l.Number(t).divide(this.trans.scaleY))},width:function(t){return null==t?2*this.attr("rx"):this.attr("rx",new l.Number(t).divide(2))},height:function(t){return null==t?2*this.attr("ry"):this.attr("ry",new l.Number(t).divide(2))},size:function(t,e){var i=r(this.bbox(),t,e);return this.attr({rx:new l.Number(i.width).divide(2),ry:new l.Number(i.height).divide(2)})}},construct:{circle:function(t){return this.ellipse(t,t)},ellipse:function(t,e){return this.put(new l.Ellipse).size(t,e).move(0,0)}}}),l.Line=l.invent({create:"line",inherit:l.Shape,extend:{x:function(t){var e=this.bbox();return null==t?e.x:this.attr({x1:this.attr("x1")-e.x+t,x2:this.attr("x2")-e.x+t})},y:function(t){var e=this.bbox();return null==t?e.y:this.attr({y1:this.attr("y1")-e.y+t,y2:this.attr("y2")-e.y+t})},cx:function(t){var e=this.bbox().width/2;return null==t?this.x()+e:this.x(t-e)},cy:function(t){var e=this.bbox().height/2;return null==t?this.y()+e:this.y(t-e)},width:function(t){var e=this.bbox();return null==t?e.width:this.attr(this.attr("x1")<this.attr("x2")?"x2":"x1",e.x+t)},height:function(t){var e=this.bbox();return null==t?e.height:this.attr(this.attr("y1")<this.attr("y2")?"y2":"y1",e.y+t)},size:function(t,e){var i=r(this.bbox(),t,e);return this.width(i.width).height(i.height)},plot:function(t,e,i,n){return this.attr({x1:t,y1:e,x2:i,y2:n})}},construct:{line:function(t,e,i,n){return this.put((new l.Line).plot(t,e,i,n))}}}),l.Polyline=l.invent({create:"polyline",inherit:l.Shape,construct:{polyline:function(t){return this.put(new l.Polyline).plot(t)}}}),l.Polygon=l.invent({create:"polygon",inherit:l.Shape,construct:{polygon:function(t){return this.put(new l.Polygon).plot(t)}}}),l.extend(l.Polyline,l.Polygon,{morphArray:l.PointArray,plot:function(t){return this.attr("points",this.array=new l.PointArray(t,[[0,0]]))},move:function(t,e){return this.attr("points",this.array.move(t,e))},x:function(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)},y:function(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)},width:function(t){var e=this.bbox();return null==t?e.width:this.size(t,e.height)},height:function(t){var e=this.bbox();return null==t?e.height:this.size(e.width,t)},size:function(t,e){var i=r(this.bbox(),t,e);return this.attr("points",this.array.size(i.width,i.height))}}),l.Path=l.invent({create:"path",inherit:l.Shape,extend:{plot:function(t){return this.attr("d",this.array=new l.PathArray(t,[["M",0,0]]))},move:function(t,e){return this.attr("d",this.array.move(t,e))},x:function(t){return null==t?this.bbox().x:this.move(t,this.bbox().y)},y:function(t){return null==t?this.bbox().y:this.move(this.bbox().x,t)},size:function(t,e){var i=r(this.bbox(),t,e);return this.attr("d",this.array.size(i.width,i.height))},width:function(t){return null==t?this.bbox().width:this.size(t,this.bbox().height)},height:function(t){return null==t?this.bbox().height:this.size(this.bbox().width,t)}},construct:{path:function(t){return this.put(new l.Path).plot(t)}}}),l.Image=l.invent({create:"image",inherit:l.Shape,extend:{load:function(t){if(!t)return this;var e=this,i=document.createElement("img");return i.onload=function(){var n=e.doc(l.Pattern);0==e.width()&&0==e.height()&&e.size(i.width,i.height),n&&0==n.width()&&0==n.height()&&n.size(e.width(),e.height()),"function"==typeof e._loaded&&e._loaded.call(e,{width:i.width,height:i.height,ratio:i.width/i.height,url:t})},this.attr("href",i.src=this.src=t,l.xlink)},loaded:function(t){return this._loaded=t,this}},construct:{image:function(t,e,i){return this.put(new l.Image).load(t).size(e||0,i||e||0)}}}),l.Text=l.invent({create:function(){this.constructor.call(this,l.create("text")),this._leading=new l.Number(1.3),this._rebuild=!0,this._build=!1,this.attr("font-family",l.defaults.attrs["font-family"])},inherit:l.Shape,extend:{x:function(t){return null==t?this.attr("x"):(this.textPath||this.lines.each(function(){this.newLined&&this.x(t)}),this.attr("x",t))},y:function(t){var e=this.attr("y"),i="number"==typeof e?e-this.bbox().y:0;return null==t?"number"==typeof e?e-i:e:this.attr("y","number"==typeof t?t+i:t)},cx:function(t){return null==t?this.bbox().cx:this.x(t-this.bbox().width/2)},cy:function(t){return null==t?this.bbox().cy:this.y(t-this.bbox().height/2)},text:function(t){if("undefined"==typeof t)return this.content;if(this.clear().build(!0),"function"==typeof t)t.call(this,this);else{t=(this.content=t).split("\n");for(var e=0,i=t.length;i>e;e++)this.tspan(t[e]).newLine()}return this.build(!1).rebuild()},size:function(t){return this.attr("font-size",t).rebuild()},leading:function(t){return null==t?this._leading:(this._leading=new l.Number(t),this.rebuild())},rebuild:function(t){if("boolean"==typeof t&&(this._rebuild=t),this._rebuild){var e=this;this.lines.each(function(){this.newLined&&(this.textPath||this.attr("x",e.attr("x")),this.attr("dy",e._leading*new l.Number(e.attr("font-size"))))}),this.fire("rebuild")}return this},build:function(t){return this._build=!!t,this}},construct:{text:function(t){return this.put(new l.Text).text(t)},plain:function(t){return this.put(new l.Text).plain(t)}}}),l.TSpan=l.invent({create:"tspan",inherit:l.Shape,extend:{text:function(t){return"function"==typeof t?t.call(this,this):this.plain(t),this},dx:function(t){return this.attr("dx",t)},dy:function(t){return this.attr("dy",t)},newLine:function(){var t=this.doc(l.Text);return this.newLined=!0,this.dy(t._leading*t.attr("font-size")).attr("x",t.x())}}}),l.extend(l.Text,l.TSpan,{plain:function(t){return this._build===!1&&this.clear(),this.node.appendChild(document.createTextNode(this.content=t)),this},tspan:function(t){var e=(this.textPath||this).node,i=new l.TSpan;return this._build===!1&&this.clear(),e.appendChild(i.node),i.parent=this,this instanceof l.Text&&this.lines.add(i),i.text(t)},clear:function(){for(var t=(this.textPath||this).node;t.hasChildNodes();)t.removeChild(t.lastChild);return this instanceof l.Text&&(delete this.lines,this.lines=new l.Set,this.content=""),this},length:function(){return this.node.getComputedTextLength()}}),l.TextPath=l.invent({create:"textPath",inherit:l.Element,parent:l.Text,construct:{path:function(t){for(this.textPath=new l.TextPath;this.node.hasChildNodes();)this.textPath.node.appendChild(this.node.firstChild);return this.node.appendChild(this.textPath.node),this.track=this.doc().defs().path(t),this.textPath.parent=this,this.textPath.attr("href","#"+this.track,l.xlink),this},plot:function(t){return this.track&&this.track.plot(t),this}}}),l.Nested=l.invent({create:function(){this.constructor.call(this,l.create("svg")),this.style("overflow","visible")},inherit:l.Container,construct:{nested:function(){return this.put(new l.Nested)}}}),l.A=l.invent({create:"a",inherit:l.Container,extend:{to:function(t){return this.attr("href",t,l.xlink)},show:function(t){return this.attr("show",t,l.xlink)},target:function(t){return this.attr("target",t)}},construct:{link:function(t){return this.put(new l.A).to(t)}}}),l.extend(l.Element,{linkTo:function(t){var e=new l.A;return"function"==typeof t?t.call(e,e):e.to(t),this.parent.put(e).put(this)}}),l.Marker=l.invent({create:"marker",inherit:l.Container,extend:{width:function(t){return this.attr("markerWidth",t)},height:function(t){return this.attr("markerHeight",t)},ref:function(t,e){return this.attr("refX",t).attr("refY",e)},update:function(t){return this.clear(),"function"==typeof t&&t.call(this,this),this},toString:function(){return"url(#"+this.id()+")"}},construct:{marker:function(t,e,i){return this.defs().marker(t,e,i)}}}),l.extend(l.Defs,{marker:function(t,e,i){return this.put(new l.Marker).size(t,e).ref(t/2,e/2).viewbox(0,0,t,e).attr("orient","auto").update(i)}}),l.extend(l.Line,l.Polyline,l.Polygon,l.Path,{marker:function(t,e,i,n){var r=["marker"];return"all"!=t&&r.push(t),r=r.join("-"),t=arguments[1]instanceof l.Marker?arguments[1]:this.doc().marker(e,i,n),this.attr(r,t)}});var c={stroke:["color","width","opacity","linecap","linejoin","miterlimit","dasharray","dashoffset"],fill:["color","opacity","rule"],prefix:function(t,e){return"color"==e?t:t+"-"+e}};return["fill","stroke"].forEach(function(t){var e,i={};i[t]=function(i){if("string"==typeof i||l.Color.isRgb(i)||i&&"function"==typeof i.fill)this.attr(t,i);else for(e=c[t].length-1;e>=0;e--)null!=i[c[t][e]]&&this.attr(c.prefix(t,c[t][e]),i[c[t][e]]);return this},l.extend(l.Element,l.FX,i)}),l.extend(l.Element,l.FX,{rotate:function(t,e,i){return this.transform({rotation:t||0,cx:e,cy:i})},skew:function(t,e){return this.transform({skewX:t||0,skewY:e||0})},scale:function(t,e){return this.transform({scaleX:t,scaleY:null==e?t:e})},translate:function(t,e){return this.transform({x:t,y:e})},matrix:function(t){return this.transform({matrix:t})},opacity:function(t){return this.attr("opacity",t)}}),l.extend(l.Rect,l.Ellipse,l.FX,{radius:function(t,e){return this.attr({rx:t,ry:e||t})}}),l.extend(l.Path,{length:function(){return this.node.getTotalLength()},pointAt:function(t){return this.node.getPointAtLength(t)}}),l.extend(l.Parent,l.Text,l.FX,{font:function(t){for(var e in t)"leading"==e?this.leading(t[e]):"anchor"==e?this.attr("text-anchor",t[e]):"size"==e||"family"==e||"weight"==e||"stretch"==e||"variant"==e||"style"==e?this.attr("font-"+e,t[e]):this.attr(e,t[e]);return this}}),l.Set=l.invent({create:function(){this.clear()},extend:{add:function(){var t,e,i=[].slice.call(arguments);for(t=0,e=i.length;e>t;t++)this.members.push(i[t]);return this},remove:function(t){var e=this.index(t);return e>-1&&this.members.splice(e,1),this},each:function(t){for(var e=0,i=this.members.length;i>e;e++)t.apply(this.members[e],[e,this.members]);return this},clear:function(){return this.members=[],this},has:function(t){return this.index(t)>=0},index:function(t){return this.members.indexOf(t)},get:function(t){return this.members[t]},first:function(){return this.get(0)},last:function(){return this.get(this.members.length-1)},valueOf:function(){return this.members},bbox:function(){var t=new l.BBox;if(0==this.members.length)return t;var e=this.members[0].rbox();return t.x=e.x,t.y=e.y,t.width=e.width,t.height=e.height,this.each(function(){t=t.merge(this.rbox())}),t}},construct:{set:function(){return new l.Set}}}),l.SetFX=l.invent({create:function(t){this.set=t}}),l.Set.inherit=function(){var t,e=[];for(var t in l.Shape.prototype)"function"==typeof l.Shape.prototype[t]&&"function"!=typeof l.Set.prototype[t]&&e.push(t);e.forEach(function(t){l.Set.prototype[t]=function(){for(var e=0,i=this.members.length;i>e;e++)this.members[e]&&"function"==typeof this.members[e][t]&&this.members[e][t].apply(this.members[e],arguments);return"animate"==t?this.fx||(this.fx=new l.SetFX(this)):this}}),e=[];for(var t in l.FX.prototype)"function"==typeof l.FX.prototype[t]&&"function"!=typeof l.SetFX.prototype[t]&&e.push(t);e.forEach(function(t){l.SetFX.prototype[t]=function(){for(var e=0,i=this.set.members.length;i>e;e++)this.set.members[e].fx[t].apply(this.set.members[e].fx,arguments);return this}})},l.extend(l.Element,{data:function(t,e,i){if("object"==typeof t)for(e in t)this.data(e,t[e]);else if(arguments.length<2)try{return JSON.parse(this.attr("data-"+t))}catch(n){return this.attr("data-"+t)}else this.attr("data-"+t,null===e?null:i===!0||"string"==typeof e||"number"==typeof e?e:JSON.stringify(e));return this}}),l.extend(l.Element,{remember:function(t,e){if("object"==typeof arguments[0])for(var e in t)this.remember(e,t[e]);else{if(1==arguments.length)return this.memory()[t];this.memory()[t]=e}return this},forget:function(){if(0==arguments.length)this._memory={};else for(var t=arguments.length-1;t>=0;t--)delete this.memory()[arguments[t]];return this},memory:function(){return this._memory||(this._memory={})}}),l});

(function(){function e(t,r,a,o,s){var n,i,c,d,l,h,m,p,u;for(n=0,i=t.length;i>n;n++){switch(h=t[n],m={},u=[],d=null,l=h.nodeName.toLowerCase(),m=SVG.parse.attr(h),l){case"rect":case"circle":case"ellipse":d=r[l](0,0);break;case"line":d=r.line(0,0,0,0);break;case"text":if(h.childNodes.length<2)d=r[l](h.textContent);else{var f;for(d=null,c=0;c<h.childNodes.length;c++)f=h.childNodes[c],"#text"!=f.nodeName.toLowerCase()&&"tspan"==f.nodeName.toLowerCase()&&(f.textContent=f.textContent.trim().replace(/\n/g," "," ").match(/[\S]+(\s)*/g).join(" "),null===d?d=r[l](f.textContent):d.tspan(f.textContent).attr(SVG.parse.attr(f)))}break;case"path":d=r.path(m.d);break;case"polygon":case"polyline":d=r[l](m.points);break;case"image":d=r.image(m["xlink:href"]);break;case"g":case"svg":d=r["g"==l?"group":"nested"](),e(h.childNodes,d,a+1,o,s);break;case"defs":e(h.childNodes,r.defs(),a+1,o,s);break;case"use":d=r.use();break;case"clippath":case"mask":d=r["mask"==l?"mask":"clip"](),e(h.childNodes,d,a+1,o,s);break;case"lineargradient":case"radialgradient":d=r.defs().gradient(l.split("gradient")[0],function(e){for(var t=0;t<h.childNodes.length;t++)"#text"!=h.childNodes[t].nodeName.toLowerCase()&&e.at({offset:0}).attr(SVG.parse.attr(h.childNodes[t])).style(h.childNodes[t].getAttribute("style"))});break;case"#comment":case"#text":case"metadata":case"desc":break;case"marker":d=r.defs().marker(h.getAttribute("markerWidth")||0,h.getAttribute("markerHeight")||0),e(h.childNodes,d,a+1,o,s);break;default:console.log("SVG Import got unexpected type "+l,h)}switch(l){case"circle":m.rx=m.r,m.ry=m.r,delete m.r}d&&(p=SVG.parse.transform(m.transform),delete m.transform,d.attr(m).transform(p),d.attr("id")&&o.add(d.attr("id"),d,0==a),"text"==l&&d.rebuild(),"function"==typeof s&&s.call(d,a))}return r}SVG.extend(SVG.Container,{svg:function(t,r){var a=document.createElement("div"),o=new SVG.ImportStore;return a.innerHTML=t.replace(/\n/,"").replace(/<([^\s]+)([^<]+?)\/>/g,"<$1$2></$1>"),e(a.childNodes,this,0,o,r),a=null,o}}),SVG.ImportStore=function(){this._importStoreRoots=new SVG.Set,this._importStore={}},SVG.extend(SVG.ImportStore,{add:function(e,t,r){if(e){if(this._importStore[e]){var a=e;e+=Math.round(1e16*Math.random()),console.warn('Encountered duplicate id "'+a+'". Changed store key to "'+e+'".')}this._importStore[e]=t}return r===!0&&this._importStoreRoots.add(t),this},roots:function(e){return"function"==typeof e?(this._importStoreRoots.each(e),this):this._importStoreRoots.valueOf()},get:function(e){return this._importStore[e]},remove:function(){return this.roots(function(){this.remove()})}})}).call(this);

/*!
 * SVG.js Pan Zoom Plugin
 * ======================
 *
 * A JavaScript library for pan and zoom SVG things.
 * Created with <3 and JavaScript by the jillix developers.
 *
 * svg.pan-zoom.js 2.2.0
 * Licensed under the MIT license.
 * */
;(function() {

    var container = null
        , markers = null
        , mousewheel = "onwheel" in document.createElement("div")
            ? "wheel"
            : document.onmousewheel !== undefined
            ? "mousewheel"
            : "DOMMouseScroll"
        ;

    function panZoom(opt_options) {

        // Selected element
        var self = this;

        function setPosition(x, y, z) {
            pz.pan.iPos = pz.pan.fPos;
            pz.transform = self.transform();
            pz.transform.x = x;
            pz.transform.y = y;
            if (typeof z === "number") {
                pz.zoom(z);
            } else {
                updateMatrix();
            }
            return pz;
        }

        function zoom(z) {
            if (typeof z === "number") {
                pz.transform = self.transform();
                pz.transform.scaleY = pz.transform.scaleX = z;
                updateMatrix();
                return pz;
            }

            pz.transform = self.transform();
            pz.transform.scaleY = pz.transform.scaleX = z;
            updateMatrix();
            return pz;
        }

        // Pan zoom object
        var pz = {
            pan: {}
            , elm: self
            , setPosition: setPosition
            , zoom: zoom
        };

        // Set options
        opt_options = Object(opt_options);
        opt_options.zoom = opt_options.zoom || [];
        opt_options.zoomSpeed = typeof opt_options.zoomSpeed === "number" ? opt_options.zoomSpeed : -1;

        // Get the svg document
        var svg = $(self.node).parent();

        // Create the rectangle
        var rect = new SVG(document.createDocumentFragment()).rect().attr({
            width: 5000
            , height: 5000,
            fill: "none"
        }).style("pointer-events", "all");

        // Insert the rectangle
        $(self.node).parent().get(0).insertBefore(rect.node, self.node);

        function updateMatrix() {
            self.attr("transform", "matrix(" + [
                    pz.transform.scaleX
                    , 0, 0
                    , pz.transform.scaleY
                    , pz.transform.x
                    , pz.transform.y
                ].join(",")+ ")");
        }

        function pan(e) {
            if (!pz.pan.mousedown) {
                return;
            }
            var tr = pz.transform = self.transform();
            var diffX = pz.pan.fPos.x - pz.pan.iPos.x;
            var diffY = pz.pan.fPos.y - pz.pan.iPos.y;
            pz.setPosition(tr.x + diffX, tr.y + diffY);
            self.node.dispatchEvent(new CustomEvent("pan", { detail: { e: e, tr: tr } }));
        }

        function mousePos(e, rel) {
            var bbox = $(self.node).parent().get(0).getBoundingClientRect()
                , abs = {
                    x: e.clientX || e.touches[0].pageX
                    , y: e.clientY || e.touches[0].pageY
                }
                ;
            if (!rel) { return abs; }
            return {
                x: abs.x - bbox.left
                , y: abs.y - bbox.top
            };
        }

        function doZoom (e) {

            if (window.editor.editorObj.disableWheelZoom) return false;

            // Get the relative mouse point
            var rP = mousePos(e, true)
                , oX = rP.x
                , oY = rP.y
                ;

            e.deltaY = e.deltaY || e.wheelDeltaY;

            // Compute the new scale
            var d = opt_options.zoomSpeed * e.deltaY / 1000
                , tr = pz.transform = self.transform()
                , scale = parseFloat(tr.scaleX + (tr.scaleX * d))
                , scaleD = parseFloat(scale / tr.scaleX)

            // Get the current x, y
                , currentX = tr.x
                , currentY = tr.y

            // Compute the final x, y
                , x = scaleD * (currentX - oX) + oX
                , y = scaleD * (currentY - oY) + oY
                ;

            // Handle zoom restrictions
            if (scale > opt_options.zoom[1]) {
                scale = opt_options.zoom[1];
                return;
            }

            if (scale < opt_options.zoom[0]) {
                scale = opt_options.zoom[0];
                return;
            }

            if (scale < window.editor.editorObj.minZoom || scale > 1){
                return;
            }

            window.editor.editorObj.zoom = scale;
            if (window.editor.editorObj.scaleControl) window.editor.editorObj.scaleControl.val(scale);

            // Zoom
            tr.scaleY = tr.scaleX = scale;
            tr.x = x;
            tr.y = y;

            self.node.dispatchEvent(new CustomEvent("zoom", { detail: { e: e, tr: tr } }));
            updateMatrix();

            // Prevent the default browser behavior
            e.preventDefault();
        }

        // The event listeners
        var EventListeners = {
            mouse_down: function (e) {
                if (window.editor.editorObj.dragMode){
                    window.editor.editorObj.svgParentNode.addClass('dragging');
                    pz.pan.mousedown = true;
                    pz.pan.iPos = mousePos(e);
                }
            }
            , mouse_up: function (e) {
                var singleClickElement = e.target.instance;
                if (singleClickElement.hasClass('makroControl')  && window.editor.editorObj.isProductionPage && !pz.pan.dragStarted){
                    window.editor.editorObj.deselectElements();
                    window.editor.editorObj.showSingleSector(singleClickElement.attr("data-joined-to"), false);
                }else{
                    if (singleClickElement.attr('data-selectable') == "true" && !pz.pan.dragStarted && window.editor.editorObj.isProductionPage && !singleClickElement.hasClass('imported')){
                        window.editor.editorObj.singleClickElement = singleClickElement;
                        if (window.editor.editorObj.selectedGroup && $(window.editor.editorObj.selectedGroup.node).children().length > 0){
                            if (window.editor.editorObj.singleClickElement.hasClass('current')){
                                if (window.editor.editorObj.currentElement.length > 1){
                                    if ($(window.editor.editorObj.selectedGroup.node).children().length > 0) {
                                        for (var i = 0; i < $(window.editor.editorObj.selectedGroup.node).children().length; i++) {
                                            if ($(window.editor.editorObj.singleClickElement.node).is($($(window.editor.editorObj.selectedGroup.node).children()[i]))) {
                                                window.editor.editorObj.currentElement.splice(i, 1);
                                                break;
                                            }
                                        }
                                    }
                                    window.editor.editorObj.changeCurrentElement(window.editor.editorObj.currentElement);
                                    if (window.editor.editorObj.currentElement.length == 0){
                                        window.editor.editorObj.changeCurrentElement(null);
                                    }
                                }else{
                                    window.editor.editorObj.changeCurrentElement(null);
                                }
                                window.editor.editorObj.singleClickElement.removeClass('current');
                                window.editor.editorObj.copyElement(window.editor.editorObj.singleClickElement, window.editor.editorObj.selectedGroup);
                                window.editor.editorObj.singleClickElement.remove();
                                delete window.editor.editorObj.singleClickElement;
                            }else{
                                window.editor.editorObj.selectedGroup.add(window.editor.editorObj.singleClickElement);
                                window.editor.editorObj.changeCurrentElement($(window.editor.editorObj.selectedGroup.node).children());
                            }
                        }else{
                            window.editor.editorObj.selectedGroup = window.editor.editorObj.createGroup();
                            window.editor.editorObj.selectedGroup.add(window.editor.editorObj.singleClickElement);
                            window.editor.editorObj.changeCurrentElement(window.editor.editorObj.singleClickElement);
                        }
                        window.editor.selectHandler(window.editor.editorObj.currentElement);
                    }
                }
                if (window.editor.editorObj.dragMode) {
                    window.editor.editorObj.svgParentNode.removeClass('dragging');
                    pz.pan.mousedown = false;
                    pz.pan.dragStarted = false;
                    window.editor.editorObj.disableHtmlSelect(false);
                    pz.pan.fPos = mousePos(e);
                    pz.pan.startPos = pz.pan.fPos;
                    pan();
                }
            }
            , mouse_move: function (e) {
                if (window.editor.editorObj.dragMode) {
                    if (!pz.pan.mousedown)return;
                    pz.pan.dragStarted = true;
                    window.editor.editorObj.disableHtmlSelect(true);
                    pz.pan.fPos = mousePos(e);
                    pan();
                }
            }
            , mouse_leave: function (e) {
                if (window.editor.editorObj.dragMode) {
                    pz.pan.mousedown = false;
                }
            }
        };
        window.EventListeners = EventListeners;

        // Add event listeners
        rect.off(mousewheel)
            .off('mousedown')
            .off('mousemove')
            .off('mouseup');
        //.off('mouseleave');

        rect
            .on(mousewheel, doZoom)
            //.on("touchstart", EventListeners.mouse_down)
            //.on("touchmove", EventListeners.mouse_move)
            //.on("touchup", EventListeners.mouse_up)
            .on("mousedown", EventListeners.mouse_down)
            .on("mousemove", EventListeners.mouse_move)
            .on("mouseup", EventListeners.mouse_up)
            //.on("mouseleave", EventListeners.mouse_leave)
        ;

        self.off(mousewheel);
        self.on(mousewheel, doZoom);
        return pz;
    }

    // Extend the SVG.Element with the new function
    SVG.extend(SVG.Element, {
        panZoom: panZoom
    });
}).call(this);


/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version: 3.1.12
 *
 * Requires: jQuery 1.2.2+
 */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof exports?module.exports=a:a(jQuery)}(function(a){function b(b){var g=b||window.event,h=i.call(arguments,1),j=0,l=0,m=0,n=0,o=0,p=0;if(b=a.event.fix(g),b.type="mousewheel","detail"in g&&(m=-1*g.detail),"wheelDelta"in g&&(m=g.wheelDelta),"wheelDeltaY"in g&&(m=g.wheelDeltaY),"wheelDeltaX"in g&&(l=-1*g.wheelDeltaX),"axis"in g&&g.axis===g.HORIZONTAL_AXIS&&(l=-1*m,m=0),j=0===m?l:m,"deltaY"in g&&(m=-1*g.deltaY,j=m),"deltaX"in g&&(l=g.deltaX,0===m&&(j=-1*l)),0!==m||0!==l){if(1===g.deltaMode){var q=a.data(this,"mousewheel-line-height");j*=q,m*=q,l*=q}else if(2===g.deltaMode){var r=a.data(this,"mousewheel-page-height");j*=r,m*=r,l*=r}if(n=Math.max(Math.abs(m),Math.abs(l)),(!f||f>n)&&(f=n,d(g,n)&&(f/=40)),d(g,n)&&(j/=40,l/=40,m/=40),j=Math[j>=1?"floor":"ceil"](j/f),l=Math[l>=1?"floor":"ceil"](l/f),m=Math[m>=1?"floor":"ceil"](m/f),k.settings.normalizeOffset&&this.getBoundingClientRect){var s=this.getBoundingClientRect();o=b.clientX-s.left,p=b.clientY-s.top}return b.deltaX=l,b.deltaY=m,b.deltaFactor=f,b.offsetX=o,b.offsetY=p,b.deltaMode=0,h.unshift(b,j,l,m),e&&clearTimeout(e),e=setTimeout(c,200),(a.event.dispatch||a.event.handle).apply(this,h)}}function c(){f=null}function d(a,b){return k.settings.adjustOldDeltas&&"mousewheel"===a.type&&b%120===0}var e,f,g=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],h="onwheel"in document||document.documentMode>=9?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],i=Array.prototype.slice;if(a.event.fixHooks)for(var j=g.length;j;)a.event.fixHooks[g[--j]]=a.event.mouseHooks;var k=a.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var c=h.length;c;)this.addEventListener(h[--c],b,!1);else this.onmousewheel=b;a.data(this,"mousewheel-line-height",k.getLineHeight(this)),a.data(this,"mousewheel-page-height",k.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var c=h.length;c;)this.removeEventListener(h[--c],b,!1);else this.onmousewheel=null;a.removeData(this,"mousewheel-line-height"),a.removeData(this,"mousewheel-page-height")},getLineHeight:function(b){var c=a(b),d=c["offsetParent"in a.fn?"offsetParent":"parent"]();return d.length||(d=a("body")),parseInt(d.css("fontSize"),10)||parseInt(c.css("fontSize"),10)||16},getPageHeight:function(b){return a(b).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};a.fn.extend({mousewheel:function(a){return a?this.bind("mousewheel",a):this.trigger("mousewheel")},unmousewheel:function(a){return this.unbind("mousewheel",a)}})});

;(function(){SVG.parse={attr:function(e){var t,n=e.attributes||[],r={};for(t=n.length-1;t>=0;t--)r[n[t].nodeName]=n[t].nodeValue;if(typeof r.stroke!="undefined"&&typeof r["stroke-width"]=="undefined")r["stroke-width"]=1;return r},transform:function(e){var t,n,r,i={},s=(e||"").match(/[A-Za-z]+\([^\)]+\)/g)||[],o=SVG.defaults.trans();for(t=s.length-1;t>=0;t--){n=s[t].match(/([A-Za-z]+)\(([^\)]+)\)/);r=(n[2]||"").replace(/^\s+/,"").replace(/,/g," ").replace(/\s+/g," ").split(" ");switch(n[1]){case"matrix":i.a=SVG.regex.isNumber.test(r[0])?parseFloat(r[0]):o.a;i.b=parseFloat(r[1])||o.b;i.c=parseFloat(r[2])||o.c;i.d=SVG.regex.isNumber.test(r[3])?parseFloat(r[3]):o.d;i.e=parseFloat(r[4])||o.e;i.f=parseFloat(r[5])||o.f;break;case"rotate":i.rotation=parseFloat(r[0])||o.rotation;i.cx=parseFloat(r[1])||o.cx;i.cy=parseFloat(r[2])||o.cy;break;case"scale":i.scaleX=SVG.regex.isNumber.test(r[0])?parseFloat(r[0]):o.scaleX;i.scaleY=SVG.regex.isNumber.test(r[1])?parseFloat(r[1]):o.scaleY;break;case"skewX":i.skewX=parseFloat(r[0])||o.skewX;break;case"skewY":i.skewY=parseFloat(r[0])||o.skewY;break;case"translate":i.x=parseFloat(r[0])||o.x;i.y=parseFloat(r[1])||o.y;break}}return i}}})();